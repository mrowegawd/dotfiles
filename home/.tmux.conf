# vim: foldmethod=marker foldlevel=0 ft=tmux
#░▀█▀░█▄█░█░█░█░█░░░░█▀▄░█▀▀ +
#░░█░░█░█░█░█░▄▀▄░░░░█▀▄░█░░ +
#░░▀░░▀░▀░▀▀▀░▀░▀░▀░░▀░▀░▀▀▀ +
# ----------------------------

# config --------------------------------- {{{

unbind c
unbind n
unbind t
unbind l
unbind d
unbind s
unbind f
unbind %
unbind '"'
unbind w
unbind o
unbind a
unbind x          # default mapping for kill-pane
unbind j
unbind L
unbind y
unbind b
unbind <
unbind >
unbind .
unbind "\$" # rename-session
unbind , # rename window
unbind "}"    # swap-pane -D
unbind "{"    # swap-pane -U
unbind !
unbind z
unbind (
unbind p
unbind )
unbind [
unbind ]
unbind "'"  # disable index

unbind m    # disable mark pane

# bind or bind-key is the same thing, set and set-option is the same either
# C : stand for 'Ctrl'
# M : stand for 'Alt'

unbind C-a
unbind C-b
set -g prefix C-Space       # C-Space | C-s | C-b | M-a
set -g repeat-time 600
set -g base-index 1
set -g pane-base-index 1
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

set -g visual-activity off

set -g status-left-length 20 # could be any number
set -g detach-on-destroy off # don't exit from tmux when closing a session

setw -g automatic-rename on
set -g mouse on
set -g history-limit 10000

# Variabel untuk melacak status lock

set -g @resize-locked 0

# set -g display-time 0
# Make help messages display for a reasonable amount of time so it's possible to
# actually read them.
# 5 seconds (default 750 ms ): (0 makes display until key is pressed)

set -g display-time 5000

set -g renumber-windows on
setw -g clock-mode-colour red
setw -g clock-mode-style 12
setw -g alternate-screen on
setw -g monitor-activity off # jangan ngedim melulu
setw -g mode-style reverse

set -g set-titles on
set -g set-titles-string "tmux:#I #W"

# set-option -g default-shell /bin/zsh

if-shell 'uname -a | grep -i microsoft' 'set-option -g default-shell /usr/bin/zsh'

# enable 256-color support for pretty colorschemes in Vim
# or if using KiTTY, enable its enhanced terminal profile

# if-shell 'test "$TERM" = "xterm-kitty"' \
#   'set-option -g default-terminal "xterm-kitty"' \
#   'set-option -g default-terminal "screen-256color"'

set-option -g focus-events on # allow Vim to receive focus events from terminal window
set-window-option -g xterm-keys on # allow Vim to recieve modifier keys: Shift, Control, Alt

# prevent tmux from catching modifier keys meant for Vim
# (set > 0: https://github.com/microsoft/WSL/issues/5931)
# Dapat setting ini untuk set repeat-time and escape-time, krna nvim mapping yang hang?
# https://www.reddit.com/r/vim/comments/72ouhy/trouble_with_tmux_possibly_related_to_escapetime/
# set-option -sg escape-time 10

set-option -s escape-time 10

# enable 24-bit true color RGB escape sequences under st
# https://sunaku.github.io/tmux-24bit-color.html

# set-option -ga terminal-overrides ',st-256color:Tc'
# set-option -ga terminal-overrides ',xterm-256color:Tc' # hterm (ChromeOS)

# allow set-titles to change the window title under XTerm
# http://opennomad.com/content/goodbye-screen-hello-tmux

# set-option -ga terminal-overrides ',xterm*:XT'

# allow set-titles to change the window title under XTerm
# http://opennomad.com/content/goodbye-screen-hello-tmux
# http://stackoverflow.com/questions/15195624

# set-option -ga terminal-overrides ',st-256color:smkx=\E='

# yank to system clipboard rather than primary selection
# http://invisible-island.net/xterm/terminfo-contents.html#tic-xterm_tmux

# set-option -ga terminal-overrides ',xterm*:Ms=\E]52;c;%p2%s\007'

# KiTTY always appends to clipboard; must clear it first
# https://sw.kovidgoyal.net/kitty/protocol-extensions.html#pasting-to-clipboard

# set-option -ga terminal-overrides ',xterm-kitty:Ms=\E]52;c;!\007\E]52;c;%p2%s\007'

# prevent standout from appearing as italics under URxvt
# http://comments.gmane.org/gmane.comp.terminal-emulators.tmux.user/1927

# set-option -ga terminal-overrides ',rxvt-unicode*:sitm@'

set-option -ga terminal-overrides ",*256col*,alacritty:Tc,$TERM:Tc"

# pass "Ptmux;" escape sequences through to the terminal

set-window-option -g allow-passthrough on

#
# }}}
# vim mode ------------------------------- {{{

set -g status-keys vi
set-window-option -g mode-keys vi

# }}}
# copy mode ------------------------------ {{{

unbind v
unbind V

# copymode: enter copy mode (bind-V)
bind V                      copy-mode

# copymode: kill/quit pane (m-x)
bind -T copy-mode-vi 'M-x'  kill-pane

# scroll: page up (m-PageUp)
bind -n M-Pageup            copy-mode \; send -X halfpage-up

# scroll: page down (m-PageDown)
bind -n M-Pagedown          copy-mode \; send -X halfpage-down

# disable space key when inside copy mode

bind -T copy-mode-vi Space  send-keys -X esc

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_yazi="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?yazi?x?)(diff)?$'"
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?fzf?x?)(diff)?$'"
# is_locked="$(tmux show -gqv @resize-locked)" && [ "$is_locked" -eq 0 ]

# bind-key -n C-j if-shell "$is_yazi" "send-keys C-j" "select-pane -D"
# bind-key -n C-k if-shell "$is_yazi" "send-keys C-k" "select-pane -U"

#########################
# NAVIGATE PANE
#########################

# https://stackoverflow.com/questions/56707794/tmux-if-shell-run-shell-different-outputs

# bind -n C-h                 if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j                 if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k                 if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l                 if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# Taken from: https://github.com/mrjones2014/smart-splits.nvim/discussions/154
bind -n C-h                   if -F "#{@navi-state}" "send-keys C-h" "select-pane -LZ"
bind -n C-j                   if -F "#{@navi-state}" "send-keys C-j" "select-pane -DZ"
bind -n C-k                   if -F "#{@navi-state}" "send-keys C-k" "select-pane -UZ"
bind -n C-l                   if -F "#{@navi-state}" "send-keys C-l" "select-pane -RZ"

# bind -n M-j               run-shell "if $is_vim || $is_yazi || $is_fzf ; then tmux send-keys M-j; else tmux select-pane -D; fi"
# bind -n M-k               run-shell "if $is_vim || $is_yazi || $is_fzf ; then tmux send-keys M-k; else tmux select-pane -U; fi"
# bind -n M-h               run-shell "if $is_vim || $is_yazi || $is_fzf ; then tmux send-keys M-h; else tmux select-pane -L; fi"
# bind -n M-l               run-shell "if $is_vim || $is_yazi || $is_fzf ; then tmux send-keys M-l; else tmux select-pane -R; fi"

#########################
# RESIZE TMUX
#########################

# bind -r M-H               resize-pane -L 7
# bind -r M-J               resize-pane -D 7
# bind -r M-K               resize-pane -U 7
# bind -r M-L               resize-pane -R 7

bind -n M-H               if -F "#{@navi-state}" "send-keys M-H" "resize-pane -L 4"
bind -n M-L               if -F "#{@navi-state}" "send-keys M-L" "resize-pane -R 4"
bind -n M-K               if -F "#{@navi-state}" "send-keys M-K" "resize-pane -U 4"
bind -n M-J               if -F "#{@navi-state}" "send-keys M-J" "resize-pane -D 4"

# Bind resize (cara resize tmux -> press bind tmux, lalu shift+hjkl)

# bind -r -T prefix K         if-shell '[ $(tmux show -gqv @resize-locked) -eq 0 ]' 'resize-pane -U 4' 'display-message "Resize is locked"'
# bind -r -T prefix J         if-shell '[ $(tmux show -gqv @resize-locked) -eq 0 ]' 'resize-pane -D 4' 'display-message "Resize is locked"'
# bind -r -T prefix H         if-shell '[ $(tmux show -gqv @resize-locked) -eq 0 ]' 'resize-pane -L 4' 'display-message "Resize is locked"'
# bind -r -T prefix L         if-shell '[ $(tmux show -gqv @resize-locked) -eq 0 ]' 'resize-pane -R 4' 'display-message "Resize is locked"'

# bind -n M-H                 if-shell "$is_vim" "send-keys M-H" 'if-shell "[ $(tmux show -gqv @resize-locked) -eq 0 ]" "resize-pane -L 4" "display-message \"Resize is locked\"'
# bind -n M-L                 if-shell "$is_vim" "send-keys M-L" 'if-shell "[ $(tmux show -gqv @resize-locked) -eq 0 ]" "resize-pane -R 4" "display-message \"Resize is locked\"'
# bind -n M-K                 if-shell "$is_vim" "send-keys M-K" 'if-shell "[ $(tmux show -gqv @resize-locked) -eq 0 ]" "resize-pane -U 4" "display-message \"Resize is locked\"'
# bind -n M-J                 if-shell "$is_vim" "send-keys M-J" 'if-shell "[ $(tmux show -gqv @resize-locked) -eq 0 ]" "resize-pane -D 4" "display-message \"Resize is locked\"'

# Jump to another pane when inside copy-mode

bind -T copy-mode-vi 'C-h'  select-pane -L
bind -T copy-mode-vi 'C-l'  select-pane -R
bind -T copy-mode-vi 'C-k'  select-pane -U
bind -T copy-mode-vi 'C-j'  select-pane -l

bind -T copy-mode-vi v      if -F '#{selection_present}' { send-keys -X clear-selection } { send-keys -X begin-selection }
bind -T copy-mode-vi V      if -F '#{selection_present}' { send-keys -X clear-selection } { send-keys -X select-line }
bind -T copy-mode-vi C-v \
  if -F '#{selection_present}' \
    { if -F '#{rectangle_toggle}' \
      { send -X rectangle-toggle ; send -X clear-selection } \
      { send -X rectangle-toggle } } \
    { send -X begin-selection ; send -X rectangle-toggle }

bind -T copy-mode-vi C-b    send-keys -X start-of-line\; send-keys -X search-backward ']'
bind -T copy-mode-vi B      send-keys -X start-of-line\; send-keys -X search-forward ']'

bind -T copy-mode-vi n      send-keys -X search-reverse
bind -T copy-mode-vi N      send-keys -X search-again

bind -T copy-mode-vi Y      send-keys -X copy-end-of-line

if-shell "uname | grep -q Darwin" {
  bind-key -T copy-mode-vi 'y' send -X copy-pipe-no-clear 'reattach-to-user-namespace pbcopy'\; display-message "Copied to pbcopy"
  bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'\; display-message "Copied to pbcopy"
} {
  bind-key -T copy-mode-vi 'y' send -X copy-pipe-no-clear 'xclip -in -selection clipboard'\; display-message "Copied to clipboard"
  bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'\; display-message "Copied to clipboard"
}

# Make double and triple click work outside of copy mode (already works inside it with default bindings).

bind -T root DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-word"
bind -T root TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-line"

# Don't exit copy mode on double or triple click.

bind-key -T copy-mode-vi DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-word"
bind-key -T copy-mode-vi TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-line"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip"

#
# }}}
# buffer --------------------------------- {{{
#

# buffer: paste buffer. or better use yank plugin
# bind -n c-v         paste-buffer

# buffer: choose buffer (bind-F9)
bind F9               choose-buffer \; display-message " Choose copy buffer mode..."

# buffer: delete history buffers (bind--)
bind -                delete-buffer \; display-message " History cleared..."

bind-key / {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
    send-keys -X search-forward-incremental "%%"
  }
}

bind-key ? {
  copy-mode -H
  command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
    send-keys -X search-backward-incremental "%%"
  }
}

bind-key -T copy-mode-vi C-g command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
  send-keys -X search-forward-incremental "%%"
}

bind-key -T copy-mode-vi s command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
  send-keys -X search-forward-incremental "%%"
}

bind-key -T copy-mode-vi / command-prompt -i -I "#{pane_search_string}" -T search -p "(search down)" {
  send-keys -X search-forward-incremental "%%"
}
bind-key -T copy-mode-vi ? command-prompt -i -I "#{pane_search_string}" -T search -p "(search up)" {
  send-keys -X search-backward-incremental "%%"
}
#
# }}}
# panes ---------------------------------- {{{

# pane: resize lock (bind-x)
bind -r x             run-shell 'tmux set -g @resize-locked 1; tmux display-message "Pane resize locked"'

# pane: resize unlock (bind-X)
bind -r X             run-shell 'tmux set -g @resize-locked 0; tmux display-message "Pane resize unlocked"'

# pane: break pane (m-U)
bind -n M-U           break-pane

# pane: new pane with smart-split (m-Enter)
# bind -n M-Enter       run -b "bash $HOME/.config/miscxrdb/bin/tm-smart-split"

# pane: display/show pane number (bind-Q)
bind Q                display-panes

# pane: cycle pane up (c-Pageup)
# bind -n C-Pageup      run -b "bash $HOME/.config/miscxrdb/bin/tm-cycle-pane pageup"

# pane: cycle pane down (c-Pagedown)
# bind -n C-Pagedown    run -b "bash $HOME/.config/miscxrdb/bin/tm-cycle-pane pagedown"

# pane: kill/quit pane with prefix (bind-q)
bind q                kill-pane

# pane: kill/quit pane (m-x)
bind -n M-x           if -F "#{@navi-state}" "send-keys M-x" "kill-pane"

# pane: split pane vertical (bind-l)
bind l                run -b "bash $HOME/.config/miscxrdb/bin/tm-toggle-pane split_normal_v"

# pane: split pane horizontal (bind-j)
bind j                run -b "bash $HOME/.config/miscxrdb/bin/tm-toggle-pane split_normal_h"

# pane: toggle term (m-f)
bind -n M-f           run -b "bash $HOME/.config/miscxrdb/bin/tm-toggle-pane split_term"

# pane: toggle zoom (m-m)
bind -n M-m           run -b "bash $HOME/.config/miscxrdb/bin/tm-pane-bar-toggle hide_bar_pane"

# pane: toggle lock pane (c-x)
# bind -n C-x           select-pane -T "Toggle Input" \; if-shell -F "#{?pane_input_off,1,0}" "select-pane -e" "select-pane -d"

# pane: reset pane size (m-w)
bind -n M-w           run-shell "if $is_yazi; then tmux send-keys M-w; else tmux select-layout -E; fi"

# pane: swap pane to left (m-Left)
bind -n M-Left        splitw -fhb \; swapp -t ! \; killp -t !

# pane: swap pane to down (m-Down)
bind -n M-Down        splitw -fv  \; swapp -t ! \; killp -t !

# pane: swap pane to up (m-Up)
bind -n M-Up          splitw -fvb \; swapp -t ! \; killp -t !

# pane: swap pane to right (m-Right)
bind -n M-Right       splitw -fh  \; swapp -t ! \; killp -t !

# pane: rotate the panes (m-R)
bind -n M-R           rotate-window -D \; select-pane -t :.+

# pane: join pane to window 1 (m-!)
bind -n M-!           join-pane -v -t :=1

# pane: join pane to window 2 (m-@)
bind -n M-@           join-pane -v -t :=2

# pane: join pane to window 3 (m-#)
bind -n M-#           join-pane -v -t :=3

# pane: join pane to window 4 (m-$)
bind -n M-$           join-pane -v -t :=4

# pane: join pane to window 5 (m-%)
bind -n M-%           join-pane -v -t :=5

# pane: join pane to window 6 (m-^)
bind -n M-^           join-pane -v -t :=6

# pane: join pane to window 7 (m-&)
bind -n M-&           join-pane -v -t :=7

# pane: join pane to window 8 (m-*)
bind -n M-*           join-pane -v -t :=8
#
# }}}
# window --------------------------------- {{{

# window: swap window prev (m-c-Left)
bind -n M-C-Left      swap-window -d -t '{previous}' # Move window left.

# window: swap window next (m-c-Right)
bind -n M-C-Right     swap-window -d -t '{next}' # Move window right.

# window: send all command to all window (bind-[c-e])
# bind C-e              command-prompt -p "session?,send command?" "run-shell \"tmux list-windows -t %1 \| cut -d: -f1\| xargs -I\{\} tmux send-keys -t %1:\{\} %2 Enter\""

# window: next (m-c-l)
bind -n M-C-l         next

# window: prev (m-c-h)
bind -n M-C-h         prev

# window: rename (bind-r)
# bind -r r           command-prompt -I "/#{window_name}/" "rename-window '%%'"

# window: kill window (m-X)
bind -n M-X           confirm-before -p "kill window '#W'? (y/n)" kill-window

# window: create new (m-N)
bind -n M-N           neww -c "#{pane_current_path}"

bind -n M-1           if-shell 'tmux select-window -t :1' '' 'new-window -t :1'
bind -n M-2           if-shell 'tmux select-window -t :2' '' 'new-window -t :2'
bind -n M-3           if-shell 'tmux select-window -t :3' '' 'new-window -t :3'
bind -n M-4           if-shell 'tmux select-window -t :4' '' 'new-window -t :4'
bind -n M-5           if-shell 'tmux select-window -t :5' '' 'new-window -t :5'
bind -n M-6           if-shell 'tmux select-window -t :6' '' 'new-window -t :6'

# pane: toggle last-used window
# bind ^space         last-window

# }}}
# sessions ------------------------------- {{{
#
# session: last session (m-b)
bind -n M-b           run -b "bash $HOME/.config/miscxrdb/bin/tm-toggle-pane last_session"

# session: rename (bind-R)
# bind -r R             command-prompt -I "#{session_name}" "rename-session '%%'"

# session: create or select session sesh (m-y)
bind -n M-y           run -b 'bash ~/.config/tmuxconfig/scripts/select-sesh'

# session: select next (m-c-j)
bind -n M-C-j         switch-client -n

# session: select prev (m-c-k)
bind -n M-C-k         switch-client -p

# session: detach from session (bind-D)
bind -r D             detach

# session: detach from session (confirm)
# bind D                if -F '#{session_many_attached}' \
#                         'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
#                         'display "Session has only 1 client attached"'
#
# }}}
# misc and custom binding ---------------- {{{

set-hook -g           pane-focus-in "run -b 'bash ~/.config/tmuxconfig/scripts/fzf_panes.tmux update_mru_pane_ids'"

set-hook -g           pane-focus-in "run -b '~/.config/miscxrdb/bin/tm-pane-bar-toggle toggle_border_visibility_and_file_manager"

# misc: open BTOP (m-F7)
# bind -n F7 if -F '#{==:#S,tmp_lfrun}' {
#     detach
# } {
#     set -gF '@last_session_name' '#S'
#     display-popup -d '#{pane_current_path}' -w '100%' -h '80%' \
#     -E -d "#{pane_current_path}" \
#     -E 'tmux new -A -s tmp_lfrun "tmux set -w pane-border-status off; tmux set -w detach-on-destroy on; TMUX_SESSION=tmp_lfrun btop;"'
# }

# misc: open ctrl-O (m-o)
bind -n M-o           run-shell "if $is_yazi; then tmux send-keys M-Y; else tmux run -b \"$HOME/.config/miscxrdb/bin/fz-ctrlo callme\"; fi"

# bind -n M-o         run-shell "if $is_vim || $is_yazi || $is_fzf ; then tmux send-keys M-o; else tmux select-pane -U; fi"

# misc: open file manager (m-e)
bind -n M-e           run -b 'bash ~/.config/miscxrdb/bin/tm-file-manager'

# misc: open snippet (m-S)
bind -n M-S           run -b "bash $HOME/.config/miscxrdb/bin/snippet"

# misc: open nvim note (bind-W)
bind -n M-W           run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_notes"

# misc: open note (bind-N)
# bind N                if-shell "tmux has-session -t notes" "switch-client -t notes" "new-session -s notes -c ~/Dropbox/neorg/ 'tmux rename-window 'notes'; nvim index.md +ObsidianQuickSwitch; tmux kill-session'"

# misc: reload/refresh tmux config (m-F5)
bind -n M-F5          source-file ~/.tmux.conf \; display "Config reloaded bro.."

# misc: open single find err (m-R)
bind -n M-R           run-shell "if $is_vim; then tmux send-keys M-R; else tmux run -b \"$HOME/.config/miscxrdb/bin/fz-ctrlo open_find_path\"; fi"

# misc: open btop (m-B)
bind -n M-B           run-shell "if $is_yazi || $is_fzf; then tmux send-keys M-o; else tmux run -b \"$HOME/.config/miscxrdb/bin/fz-ctrlo open_ps_btop\"; fi"

# misc: open check pip ps lsof (m-Y)
bind -n M-Y           run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_ps_lsof"

# misc: open float terminal (m-T)
bind -n M-T           run-shell "if $is_yazi || $is_fzf; then tmux send-keys M-t; else tmux run -b \"$HOME/.config/miscxrdb/bin/tm-toggle-pane float_term\"; fi"

# misc: open rkill (bind-C)
bind -n M-C           run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_rkill"

# misc: open newsboat (m-M)
# bind -n M-M           run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_newsboat"

# misc: toggle big zoom (m-F8)
# bind -n M-M           run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_newsboat"

# misc: open calc (bind-A)
# bind -r A             run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_calc"

# # misc: open calcure, calendar (bind-C)
# bind -r C             run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_calcure"

# misc: open lazygit (m-g)
bind -n M-G           run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_lazygit"

# bind -r g           display-popup -d '#{pane_current_path}' -E -w 90% -h 90% "lazygit --use-config-file $HOME/.config/lazygit/config.yml,$HOME/.config/lazygit/theme/fla.yml" # Open Lazygit inside popup

# misc: open lazydocker (m-d)
bind -n M-D           run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_lazydocker"

# bind -r d           display-popup -d '#{pane_current_path}' -E -w 90% -h 90% "lazydocker"

# misc: search URL in curpane (bind-s)
bind -n M-F           run -b "bash $HOME/.config/miscxrdb/bin/fz-ctrlo open_url"

# misc: show help keys (bind-?)
bind -r ?             run-shell 'tmux neww -n "help" "tmux list-keys -N | fzf"'

#
# }}}
# themes --------------------------------- {{{

source ~/.config/tmuxconfig/themes/tmux-snapshot

# }}}
# plugins -------------------------------- {{{

# plugin-tmp: install all (bind-I)
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.config/tmux/plugins'

# Usage:
#   prefix + I        - install the plugin
#   prefix + U        - updates the plugin

# plugin-tmp: update all (bind-U)
set -g @plugin 'tmux-plugins/tpm'

# --------------------------------------------------------------------------

# Saves and restores tmux sessions beyond system crashes and restarts

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# set -g @continuum-restore 'on'
set -g @continuum-restore 'off'

# set -g @continuum-save-interval '5'

# plugin-resurrect: save workspaces (bind-S)
set -g @resurrect-save "S"

# plugin-resurrect: save workspaces (bind-R)
set -g @resurrect-restore "R"

# --------------------------------------------------------------------------

set -g @plugin 'olimorris/tmux-pomodoro-plus'   # time focus, with pomodoro
set -g @pomodoro_mins 25                        # The duration of the pomodoro
set -g @pomodoro_break_mins 3                   # The duration of the break after the pomodoro
set -g @pomodoro_repeat true                    # Auto-repeat the pomodoro? False by default
set -g @pomodoro_on "#[fg=#ff3333]🍅 "
set -g @pomodoro_complete "#[fg=#55ff00]✅ "
set -g @pomodoro_notifications 'on'             # Enable desktop notifications from your terminal
set -g @pomodoro_granularity 'on'               # Enables MM:SS (ex: 00:10) format instead of the default (ex: 1m)
set -g @pomodoro_sound 'on'                     # Sound for desktop notifications (Run `ls /System/Library/Sounds` for a list of sounds to use on Mac)
# set -g @pomodoro_sound '/usr/bin/play $HOME/.config/miscxrdb/mp3-wav/beep-warning.mp3'

# plugin-pomodoro: restart (bind-[m-p])
set -g @pomodoro_restart 'M-p'                  # Start a Pomodoro with tmux-prefix + p

# plugin-pomodoro: start/pause (bind-p)
set -g @pomodoro_start 'p'                      # Start a Pomodoro with tmux-prefix + p

# plugin-pomodoro: cancel/kill (bind-P)
set -g @pomodoro_cancel 'P'                     # Cancel a Pomodoro with tmux-prefix key + P

# --------------------------------------------------------------------------

# set -g @plugin 'tmux-plugins/tmux-urlview'
# set -g @plugin 'tmux-plugins/tmux-logging'

# plugin: urlview open url on browser (bind-x)
# set -g @urlview-key 'x'

# --------------------------------------------------------------------------

# set -g @plugin 'Morantron/tmux-fingers'


set -g @fingers-pattern-1 "(([.\\w\\-~\\$@]+)?(/[.\\w\\-@]+)+/?):\\d+"
set -g @fingers-pattern-2 "(([.\\w\\-~\\$@]+)?(/[.\\w\\-@]+)+/?)\",\\sline\\s\\d+" # for error python

# plugin-fingers: jump to selected target, copy mode (bind-J)
# set -g @fingers-jump-key J

# plugin-fingers: copy selected target (bind-F)
set -g @fingers-key F

# plugin-fingers: open selected target to editor nvim (bind-F-[alt-key])
set -g @fingers-alt-action "$HOME/.config/miscxrdb/bin/tm-jump-to-main-pane"

# --------------------------------------------------------------------------

set -g @plugin 'fcsonline/tmux-thumbs'

# Jika set thumbs-contrast=1, maka hint nya akan menjadi b -> [b]

set -g @thumbs-contrast 1

set -g @thumbs-regexp-1 "(([.\\w\\-~\\$@]+)?(/[.\\w\\-@]+)+/?):\\d+"
set -g @thumbs-regexp-2 "(([.\\w\\-~\\$@]+)?(/[.\\w\\-@]+)+/?)\",\\sline\\s\\d+" # for error python

# default: 'tmux set-buffer -- {} && tmux display-message \"Copied {}\"'
# set -g @thumbs-command 'echo -n {} | pbcopy'

set -g @thumbs-command 'echo -n {} | xclip -sel clip && tmux display-message \"Copied\"'

# plugin-fingers: select target (bind-T)
set -g @thumbs-key T

# --------------------------------------------------------------------------

if 'test ! -d ~/.config/tmux/plugins/tpm' \
  'run "git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm"'

run -b '~/.config/tmux/plugins/tpm/tpm'

run-shell "$XDG_CONFIG_HOME/miscxrdb/tmux/navi.tmux
#
# }}}
