#!/bin/bash

make_call() {
  if [ ! -f "$1" ]; then
    touch "$1"
    bspc node "$2" -d "^1"
    # bspc node -f east
  else
    bspc node "$2" -d "^$3"
    rm "$1"
  fi

}

swap_desktop() {
  direction="$1" # "next" atau "prev"

  current=$(bspc query -D -d --names)
  target=$(bspc query -D -d "${direction}.local" --names)

  # If target exists, swap them
  if [ -n "$target" ]; then
    bspc desktop "$current" --swap "$target"
  fi
}

toggle_call_win() {
  MARK_FILE="/tmp/.keep_$1"
  POSITION_WIN=$2

  for VAR in $(bspc query -N); do
    # output dari $VAR adalah 0x041xx (number window id)
    # output dari xdotool getwindowname "$VAR" (berupa string)

    # check apakah getwindowname name dari $VAR contains string mozilla
    if [ "$1" == "firefox" ]; then
      if [[ $(xdotool getwindowname "$VAR") == *"Mozilla"* ]] || [[ $(xdotool getwindowname "$VAR") == *"Zen Browser"* ]]; then
        make_call "$MARK_FILE" "$VAR" "$POSITION_WIN"
        break
      fi
    fi

    if [ "$1" == "zathura" ]; then
      if [[ $(xdotool getwindowname "$VAR") == *".pdf"* ]]; then
        make_call "$MARK_FILE" "$VAR" "$POSITION_WIN"
        break
      fi
    fi
  done
}

set_win_state() {
  # Original: bspc node -g {locked,sticky}
  MSG_BSPC_TITLE="BSPC-WINCALL"
  MSG_STATE="State ="

  if [[ $1 == "locked" ]]; then
    STATUS="locked"
    if [[ ! -f /tmp/bspwm-locked-status ]]; then
      STATUS="Unlocked"
      touch /tmp/bspwm-locked-status
    else
      rm /tmp/bspwm-locked-status
    fi
    bspc node -g locked
    dunstify "$MSG_BSPC_TITLE" "$MSG_STATE $STATUS"
  fi

  if [[ $1 == "sticky" ]]; then
    STATUS="unsticky"
    if [[ ! -f /tmp/bspwm-sticky-status ]]; then
      STATUS="sticky"
      touch /tmp/bspwm-sticky-status
    else
      rm /tmp/bspwm-sticky-status
    fi
    bspc node -g sticky
    dunstify "$MSG_BSPC_TITLE" "$MSG_STATE $STATUS"
  fi

}

win_big_zoom_toggle() {
  TMP_DIR="/tmp/bspwm_window_states"
  mkdir -p "$TMP_DIR"

  # Get ID of focused window
  wid=$(bspc query -N -n focused)
  wid_hex=$(printf "0x%x" "$wid")

  STATE_FILE="${TMP_DIR}/${wid_hex}.state"

  # Get ukuran, posisi current window
  get_window_size() {
    info=$(xwininfo -id "$wid_hex")
    x=$(echo "$info" | grep "Absolute upper-left X" | awk '{print $NF}')
    y=$(echo "$info" | grep "Absolute upper-left Y" | awk '{print $NF}')
    width=$(echo "$info" | grep "Width:" | awk '{print $2}')
    height=$(echo "$info" | grep "Height:" | awk '{print $2}')
    echo "$x $y $width $height"
  }

  # Toggle logic
  if [[ -f "$STATE_FILE" ]]; then
    # Restore original size
    read -r x y width height <"$STATE_FILE"
    bspc node -t floating
    xdotool windowmove "$wid" "$x" "$y"
    xdotool windowsize "$wid" "$width" "$height"
    rm "$STATE_FILE"

    dunstify --timeout=1000 "BSPC-WINCALL" "⤺ Restore to ${width}x${height}"
  else
    # Save current size, and then expand
    read -r x y width height < <(get_window_size)
    echo "$x $y $width $height" >"$STATE_FILE"

    # Get ukuran layar (monitor aktif)
    screen_width=$(xdpyinfo | awk '/dimensions/{print $2}' | cut -d 'x' -f1)
    screen_height=$(xdpyinfo | awk '/dimensions/{print $2}' | cut -d 'x' -f2)

    target_width=1000
    target_height=800

    # Hitung posisi tengah
    center_x=$(((screen_width - target_width) / 2))
    center_y=$(((screen_height - target_height) / 2))

    bspc node -t floating

    # Resize dan pindahkan ke tengah
    xdotool windowsize "$wid" "$target_width" "$target_height"
    xdotool windowmove "$wid" "$center_x" "$center_y"

    dunstify --timeout=1000 "BSPC-WINCALL" "⤒ Expand to 1000x800"
  fi
}

"$@"
