#!/bin/bash

#shellcheck source=/dev/null
. "$HOME/.config/miscxrdb/fzf/fzf.config"

dir="$HOME/.config/rofi/menu"
theme="styles/snippets"
rofi_command="rofi -theme $dir/$theme"

COL_MSG_SUCCSS="$(xrdb -query | grep "color3" | head -n 1 |
  cut -d":" -f2 | xargs)"
TITLE_DUNST="Show Linux Help"
TITLE_BORDER_LABEL="Bulk Snippet"

is_mac() {
  uname | grep -q "Darwin"
}
not_in_tmux() {
  [ -z "$TMUX" ]
}

FZF_COMMAND="fzf --no-border "
if ! not_in_tmux; then
  FZF_COMMAND="fzf-tmux -xC -w 80% -h 60% "
fi

is_path_exits() {
  if [[ ! -f "$1" ]]; then
    dunstify "[!] Showlinuxhelp" "path $1 not exists or deleted!"
    exit
  fi
}
copy_selected() {
  [[ -z $1 ]] && exit

  if [[ $2 == "true" ]]; then
    if is_mac; then
      echo -n "$1" | pbcopy
    else
      echo -n "$1" | xclip -selection clipboard
    fi

    MSG_="<b><span foreground='$COL_MSG_SUCCSS'>Copied !</span></b>"
    dunstify "$TITLE_DUNST" "$MSG_"
  fi
}

aliases() {
  BASHRC_PATH="$HOME/.config/bashrc/aliases.bashrc"
  is_path_exits "$BASHRC_PATH"

  # SELECT=$(awk '/\(\)/&& last {print $1,"\t",last} {last=""} /^#/{last=$0}' "$BASHRC_PATH" | sed 's/#//' | sed 's/()//' |
  #   column -t -s $'\t' | $FZF_COMMAND --prompt="Snippets[$1] ")

  EDIT_CMD="bspc rule -a \* -o state=floating center=true rectangle=800x500+0+0 && zsh -c 'nvim $BASHRC_PATH'"
  RELOAD_CMD="dunstify '$TITLE_DUNST' 'Surfingkeys snippet updated'"

  SELECT=$(rg --pretty bash | awk '/\(\)/&& last {print last,"\n",$1,"\n"} {last=""} /^#/{last=$0}' "$BASHRC_PATH" | sed 's/#//' |
    perl -0 -pe 's/\n\n/\0/gm' | $FZF_COMMAND --read0 --gap --multi --highlight-line --pointer='â–Œ' \
    --header="^x:edit  ^r:reload" \
    --bind="ctrl-x:execute($EDIT_CMD)" \
    --bind="ctrl-r:execute($RELOAD_CMD)" \
    --border-label=" $TITLE_BORDER_LABEL [$1] " |
    awk NF | tail -1)

  copy_selected "$SELECT" "true"
}
surfingkeys() {
  SURFINGKEYS_PATH="$HOME/.config/surfingkeys/guidekeys.conf"
  is_path_exits "$SURFINGKEYS_PATH"

  EDIT_CMD="bspc rule -a \* -o state=floating center=true rectangle=800x500+0+0 && zsh -c 'nvim $SURFINGKEYS_PATH'"
  RELOAD_CMD="dunstify '$TITLE_DUNST' 'Surfingkeys snippet updated'"

  SELECT=$(awk '/^[a-zA-Z?.]/ && last {print $1,$2,"\t",last} {last=""} /^#/{last=$0}' "$SURFINGKEYS_PATH" | sed 's/#//' | sort |
    column -t -s $'\t' | $FZF_COMMAND \
    --header="^x:edit  ^r:reload" \
    --bind="ctrl-x:execute($EDIT_CMD)" \
    --bind="ctrl-r:execute($RELOAD_CMD)" \
    --border-label=" $TITLE_BORDER_LABEL [$1] " |
    awk NF | tail -1)

  copy_selected "$SELECT"
}
vimiumc() {
  VIMIUMC_PATH="$HOME/.config/vimmum-c/vimium_c.rc"
  is_path_exits "$VIMIUMC_PATH"
  SELECT=$(awk '/^[a-zA-Z?.]/ && last {print $1,$2,"\t",last} {last=""} /^#/{last=$0}' "$VIMIUMC_PATH" | sed 's/#//' |
    column -t -s $'\t' | $FZF_COMMAND --prompt="Snippets[$1] ")

  copy_selected "$SELECT"
}
calcurse() {
  CALCURE_PATH="$HOME/.calcurse/keys"
  is_path_exits "$CALCURE_PATH"
  SELECT=$(awk '/^[a-z]/ && last {print $1,$2,"\t",last} {last=""} /^/{last=$0}' "$CALCURE_PATH" |
    column -t -s $'\t' | $FZF_COMMAND --prompt="Snippets[$1] ")

  copy_selected "$SELECT"
}
ncmpcpp() {
  NCMPCPP_PATH="$HOME/.ncmpcpp/bindings"
  is_path_exits "$NCMPCPP_PATH"
  SELECT=$(awk '/^[a-zA-Z]/ && last {print $2,"\t",last} {last=""} /^#/{last=$0}' "$NCMPCPP_PATH" | sed 's/#//' | sed 's/"//g' |
    column -t -s $'\t' | $FZF_COMMAND --prompt="Snippets[$1] ")

  copy_selected "$SELECT"
}
newsboat() {
  NEWSBOAT_PATH="$HOME/.config/miscxrdb/help/keybindings/newsboat"
  is_path_exits "$NEWSBOAT_PATH"
  SELECT=$(awk '/^[a-z]/ && last {print $2,"\t",last} {last=""} /^#/{last=$0}' "$NEWSBOAT_PATH" | sed 's/#//' |
    column -t -s $'\t' | $FZF_COMMAND --prompt="Snippets[$1] ")

  copy_selected "$SELECT"
}
mpv() {
  MPV_PATH="$HOME/.config/mpv/input.conf"
  is_path_exits "$MPV_PATH"

  EDIT_CMD="bspc rule -a \* -o state=floating center=true rectangle=800x500+0+0 && zsh -c 'nvim $MPV_PATH'"
  RELOAD_CMD="dunstify '$TITLE_DUNST' 'MPV snippet updated'"

  SELECT=$(
    awk '/^[a-zA-Z]/ && last {
  if ($2 == "-n")
    print $1,$3,"\t",last;
  else
    print $1,"\t\t",last;
  }
  {last=""} /^#/{last=$0}' "$MPV_PATH" | sort |
      column -t -s $'\t' |
      sed 's/#//g' |
      fzf-tmux -xC -w 80% -h 60% \
        --header="^x:edit  ^r:reload" \
        --bind="ctrl-x:execute($EDIT_CMD)" \
        --bind="ctrl-r:execute($RELOAD_CMD)" \
        --border-label=" $TITLE_BORDER_LABEL [$1] " |
      awk NF | tail -1
  )

  copy_selected "$SELECT"

}
sxhkdrc() {
  SXHKDRC_PATH="$HOME/.config/sxhkd/sxhkdrc"
  is_path_exits "$SXHKDRC_PATH"
  SELECT=$(awk '/^[a-zA-Z]/ && last {print $0,"\t",last} {last=""} /^#/{last=$0}' <"$SXHKDRC_PATH" | sed 's/#//' |
    column -t -s $'\t' | $FZF_COMMAND --prompt="Snippets[$1] ")

  copy_selected "$SELECT"
}
tmux() {
  TMUX_PATH="$HOME/.tmux.conf"
  is_path_exits "$TMUX_PATH"

  EDIT_CMD="bspc rule -a \* -o state=floating center=true rectangle=800x500+0+0 && zsh -c 'nvim $TMUX_PATH'"
  RELOAD_CMD="dunstify '$TITLE_DUNST' 'Tmux snippet updated'"

  SELECT=$(
    awk '/^[a-z]/ && last {
  if ($2 == "-n")
    print $1,$3,"\t",last;
  else if ($2 == "-r")
    print $1,$3,"\t",last;
  else if ($2 == "-T")
    print $1,$3,$4,"\t",last;
  else
    print $1,$2,"\t",last;
  }
  {last=""} /^#/{last=$0}' "$TMUX_PATH" | sort |
      awk -F"#" '{print $2}' | awk -F"(" '{printf "%s %s\n", $2,$1}' |
      column -t -s ")" | fzf-tmux -xC -w 80% -h 60% \
      --header="^x:edit  ^r:reload" \
      --bind="ctrl-x:execute($EDIT_CMD)" \
      --bind="ctrl-r:execute($RELOAD_CMD)" \
      --border-label=" $TITLE_BORDER_LABEL [$1] " |
      awk NF | tail -1
  )

  copy_selected "$SELECT"
}
zathura() {
  ZATHURA_PATH="$HOME/.config/zathura/zathurarc"
  is_path_exits "$ZATHURA_PATH"
  SELECT=$(awk '/^[a-z]/ && last {print $1,$2,"\t",last} {last=""} /^#/{last=$0}' "$ZATHURA_PATH" | sed 's/#//' |
    column -t -s $'\t' | $FZF_COMMAND --prompt="Snippets[$1] ")

  copy_selected "$SELECT"
}
terminal_st() {
  ST_TERMINAL_PATH="$HOME/.config/miscxrdb/terminal/st/binding"
  is_path_exits "$ST_TERMINAL_PATH"
  awk '/^[a-zA-Z]/ && last {print $2,"\t",last} {last=""} /^#/{last=$0}' "$ST_TERMINAL_PATH" | sed 's/#//' |
    column -t -s $'\t' | $rofi_command -dmenu -p "snippet[$1]"
}
terminal_alacritty() {
  ALACRITTY_TERMINAL_PATH="$HOME/.config/miscxrdb/terminal/binding/alacritty"
  is_path_exits "$ALACRITTY_TERMINAL_PATH"
  awk '/^[a-zA-Z]/ && last {print $2,"\t",last} {last=""} /^#/{last=$0}' "$ALACRITTY_TERMINAL_PATH" |
    column -t -s $'\t' | $rofi_command -dmenu -p "snippet[$1]"
}
terminal_kitty() {
  KITTY_TERMINAL_PATH="$HOME/.config/kitty/mappings.conf"
  is_path_exits "$KITTY_TERMINAL_PATH"
  awk '/^[a-zA-Z]/ && last {print $2,"\t",last} {last=""} /^#/{last=$0}' "$KITTY_TERMINAL_PATH" | sed 's/#//' |
    column -t -s $'\t' | $rofi_command -dmenu -p "snippet[$1]"
}
vim() {
  OUT="$HOME/.cache/vimsnipets.sh"
  MYSTAT=$(grep -i "^Plug" <"$HOME/.config/nvim/plugins.vim" | cut -d"/" -f2 | cut -d"'" -f1 | xargs)

  FILEPATH=""
  for v in $MYSTAT; do
    if [ -f "$HOME/.config/nvim/after/plugin/$v.vim" ]; then
      FILEPATH+="$HOME/.config/nvim/after/plugin/$v.vim "
    fi
  done

  cat <<-EOF >"$OUT"
		main () {
		  awk '
		    /^[a-z_ ]/ && last {
		    if (\$2 == "<silent>")
		      if (\$3 == "<buffer>")
		        print \$1,\$4"\\t\\t -",last;
		      else if (\$3 == "<expr>")
		        print \$1,\$4"\\t\\t -",last;
		      else
		        print \$1,\$3"\\t\\t -",last;
		    else if (\$2 == "<expr>")
		        print \$1,\$3"\\t\\t -",last;
		    else
		        print \$1,\$2"\\t\\t -",last;
		    }
		  {last=""}
		  /keymap/ {last=\$0}' ~/.config/vimlocal/mapping.vim \\
		    $FILEPATH \\
		    ~/.config/nvim/plugin/after/*.vim \\
		    ~/Dropbox/data.programming.forprivate/vim-guide/*.vim |
		    sort |
		    sed -e s/\".keymap://g |
		    column -t -s $'\\t' |
		    rofi -width 1000 -dmenu -shorting-method fzf -p "$1"
		}

		main
	EOF

  [[ -f $OUT ]] && bash "$OUT"
}
bulk_note_snippets() {
  case "$1" in
  "asdf")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/_tools/asdf.md"
    ;;
  "grep")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-grep.md"
    ;;
  "apt")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-apt.md"
    ;;
  "user")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-user.md"
    ;;
  "dpkg")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-dpkg.md"
    ;;
  "ppa")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-ppa.md"
    ;;
  "systemctl")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-systemctl.md"
    ;;
  "journalctl")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-journalctl.md"
    ;;
  "rg")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-rg.md"
    ;;
  "find")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-find.md"
    ;;
  "curl")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-curl.md"
    ;;
  "stow")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-stow.md"
    ;;
  "awk")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-awk.md"
    ;;
  "wget")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-wget.md"
    ;;
  "cut")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-cut.md"
    ;;
  "npm")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/_tools/npm.md"
    ;;
  "yarn")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/_tools/yarn.md"
    ;;
  "cargo")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/_tools/cargo.md"
    ;;
  "sed")
    TARGET_PATH="$HOME/Dropbox/neorg/OS/linux/linux-sed.md"
    ;;
  "ansible")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/ansible/ansible-commands.md"
    ;;
  "molecule")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/ansible/ansible-test.md"
    ;;
  "docker-hub")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/docker/docker-hub.md"
    ;;
  "docker-image")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/docker/docker-image.md"
    ;;
  "docker-container")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/docker/docker-container.md"
    ;;
  "docker-network")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/docker/docker-network.md"
    ;;
  "docker-volume")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/docker/docker-volume.md"
    ;;
  "docker-dockerfile")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/docker/docker-dockerfile.md"
    ;;
  "docker-compose")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/docker/docker-compose.md"
    ;;
  *)
    exit
    ;;
  esac

  is_path_exits "$TARGET_PATH"

  EDIT_CMD="bspc rule -a \* -o state=floating center=true rectangle=800x500+0+0 && zsh -c 'nvim $TARGET_PATH'"
  RELOAD_CMD="dunstify '$TITLE_DUNST' 'All current note snippets updated'"

  SELECT=$(
    rg --pretty bash | awk '/^[a-zA-Z]/ && last { printf "%s\n%s\n", last, $0; }
  {last=""} /^#;/{last=$0}' "$TARGET_PATH" |
      perl -0 -pe 's/#; /\0/gm' | grcat bulksnip.grc | sed 's/## //' |
      fzf-tmux -xC -w 80% -h 60% \
        --read0 --multi --highlight-line --gap \
        --pointer='â–Œ' \
        --header="^x:edit  ^r:reload" \
        --bind="ctrl-x:execute($EDIT_CMD)" \
        --bind="ctrl-r:execute($RELOAD_CMD)" \
        --border-label=" $TITLE_BORDER_LABEL [$1] " |
      awk NF | tail -1
  )

  copy_selected "$SELECT" "true"
}
bulk_show_snippets() {
  case "$1" in
  "lazygit")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/nvim/lazygit.txt"
    ;;
  *)
    exit
    ;;
  esac

  is_path_exits "$TARGET_PATH"

  EDIT_CMD="bspc rule -a \* -o state=floating center=true rectangle=800x500+0+0 && zsh -c 'nvim $TARGET_PATH'"
  RELOAD_CMD="dunstify '$TITLE_DUNST' 'All current note snippets updated'"

  # perl -0 -pe 's/#; /\0/gm' | grcat bulksnip.grc | sed 's/## //' |

  #SELECT=$(
  #  rg --pretty bash | awk '/^[a-zA-Z]/ && last { printf "%s\n%s\n", last, $0; }
  #{last=""} /^```/{last=$0}' "$TARGET_PATH" |
  #    fzf-tmux -xC -w 80% -h 80% -y 43% \
  #      --read0 --multi --highlight-line --gap \
  #      --pointer='â–Œ' \
  #      --header="^x:edit  ^r:reload" \
  #      --bind="ctrl-x:execute($EDIT_CMD)" \
  #      --bind="ctrl-r:execute($RELOAD_CMD)" \
  #      --border-label=" $TITLE_BORDER_LABEL [$1] " |
  #    awk NF | tail -1

  # SELECT=$(rg --pretty bash | awk '
  #       /^#\s/ { print; next }                  # Cetak baris yang diawali "#" (judul)
  #       in_block && /^```/ { in_block=0; next }   # Jika dalam blok dan ketemu ``` maka akhiri blok
  #       in_block { print; next }              # Jika dalam blok, cetak baris
  #       /^```comment/ { in_block=1 }          # Jika ketemu awal blok comment, mulai cetak
  # ' "$TARGET_PATH" |
  #   fzf-tmux -xC -w 80% -h 80% -y 43% \
  #     --read0 --multi --highlight-line --gap \
  #     --pointer='â–Œ' \
  #     --header="^x:edit  ^r:reload" \
  #     --bind="ctrl-x:execute($EDIT_CMD)" \
  #     --bind="ctrl-r:execute($RELOAD_CMD)" \
  #     --border-label=" $TITLE_BORDER_LABEL [$1] " |
  #   awk NF | tail -1)

  SELECT=$(
    rg --pretty bash | grep -v '^>>' "$TARGET_PATH" | perl -0 -pe 's/\n\n/\0/gm' | grcat bulksnip.grc | sed 's/##; //' |
      fzf-tmux -xC -w 80% -h 60% \
        --read0 --multi --highlight-line --gap \
        --pointer='â–Œ' \
        --header="^x:edit  ^r:reload" \
        --bind="ctrl-x:execute($EDIT_CMD)" \
        --bind="ctrl-r:execute($RELOAD_CMD)" \
        --border-label=" $TITLE_BORDER_LABEL [$1] " |
      awk NF | tail -1
  )
  copy_selected "$SELECT"
}
bulk_code_snippets() {
  case "$1" in
  "facade-python")
    TARGET_PATH="$HOME/Dropbox/neorg/learning/python/python-facade-pattern.md"
    ;;
  *)
    exit
    ;;
  esac

  is_path_exits "$TARGET_PATH"

  EDIT_CMD="bspc rule -a \* -o state=floating center=true rectangle=800x500+0+0 && zsh -c 'nvim $TARGET_PATH'"
  RELOAD_CMD="dunstify '$TITLE_DUNST' 'All current note snippets updated'"

  # perl -0 -pe 's/#; /\0/gm' | grcat bulksnip.grc | sed 's/## //' |

  #SELECT=$(
  #  rg --pretty bash | awk '/^[a-zA-Z]/ && last { printf "%s\n%s\n", last, $0; }
  #{last=""} /^```/{last=$0}' "$TARGET_PATH" |
  #    fzf-tmux -xC -w 80% -h 80% -y 43% \
  #      --read0 --multi --highlight-line --gap \
  #      --pointer='â–Œ' \
  #      --header="^x:edit  ^r:reload" \
  #      --bind="ctrl-x:execute($EDIT_CMD)" \
  #      --bind="ctrl-r:execute($RELOAD_CMD)" \
  #      --border-label=" $TITLE_BORDER_LABEL [$1] " |
  #    awk NF | tail -1

  # --read0 --multi --highlight-line --gap \
  SELECT=$(rg --pretty bash | awk '
        /^##\s/ { print; next }                   # Cetak baris yang diawali "#" (judul)
        in_block && /^```/ { in_block=0; next }   # Jika dalam blok dan ketemu ``` maka akhiri blok
        in_block { print; next }                  # Jika dalam blok, cetak baris
        /^```/ { in_block=1 }                     # Jika ketemu awal blok comment, mulai cetak
  ' "$TARGET_PATH" |
    fzf-tmux -xC -w 80% -h 60% \
      --pointer='â–Œ' \
      --header="^x:edit  ^r:reload" \
      --bind="ctrl-x:execute($EDIT_CMD)" \
      --bind="ctrl-r:execute($RELOAD_CMD)" \
      --border-label=" $TITLE_BORDER_LABEL [$1] " |
    awk NF | tail -1)

  copy_selected "$SELECT"
}
bulk_snippets() {
  case "$1" in
  "fzf")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/nvim/fzf.txt"
    ;;
  "octo")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/nvim/octo.txt"
    ;;
  "quickfix")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/nvim/quickfix.txt"
    ;;
  "search-and-replace")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/nvim/search-and-replace.txt"
    ;;
  "buffers")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/nvim/buffers.txt"
    ;;
  "git-fork")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/nvim/git-fork.txt"
    ;;
  "cronjob")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/cronjob.txt"
    ;;
  "py-uv")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/py-uv.txt"
    ;;
  "py-poetry")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/py-poetry.txt"
    ;;
  "py-pip")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/py-pip.txt"
    ;;
  "http-status")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/http-status.txt"
    ;;
  "fugitive")
    TARGET_PATH="$HOME/Dropbox/neorg/snippets/nvim/fugitive.txt"
    ;;
  *)
    exit
    ;;
  esac

  is_path_exits "$TARGET_PATH"

  EDIT_CMD="bspc rule -a \* -o state=floating center=true rectangle=800x500+0+0 && zsh -c 'nvim $TARGET_PATH'"
  RELOAD_CMD="dunstify '$TITLE_DUNST' 'All current snippets updated'"

  SELECT=$(
    rg --pretty bash | perl -0 -pe 's/\n\n/\0/gm' "$TARGET_PATH" | grcat bulksnip.grc | sed 's/##; //' |
      fzf-tmux -xC -w 80% -h 60% \
        --read0 --multi --highlight-line --gap \
        --pointer='â–Œ' \
        --header="^x:edit  ^r:reload" \
        --bind="ctrl-x:execute($EDIT_CMD)" \
        --bind="ctrl-r:execute($RELOAD_CMD)" \
        --border-label=" $TITLE_BORDER_LABEL [$1] " |
      awk NF | tail -1
  )

  copy_selected "$SELECT" "true"

}

main() {
  case $1 in
  "aliases") aliases "aliases" ;;
  "ansible") bulk_note_snippets "ansible" ;;
  "apt") bulk_note_snippets "apt" ;;
  "asdf") bulk_note_snippets "asdf" ;;
  "awk") bulk_note_snippets "awk" ;;
  "buffers") bulk_snippets "buffers" ;;
  "calcurse") calcurse "calcurse" ;;
  "cargo") bulk_note_snippets "cargo" ;;
  "cronjob") bulk_snippets "cronjob" ;;
  "curl") bulk_note_snippets "curl" ;;
  "cut") bulk_note_snippets "cut" ;;
  "docker-compose") bulk_note_snippets "docker-compose" ;;
  "docker-container") bulk_note_snippets "docker-container" ;;
  "docker-dockerfile") bulk_note_snippets "docker-dockerfile" ;;
  "docker-hub") bulk_note_snippets "docker-hub" ;;
  "docker-image") bulk_note_snippets "docker-image" ;;
  "docker-network") bulk_note_snippets "docker-network" ;;
  "docker-volume") bulk_note_snippets "docker-volume" ;;
  "dpkg") bulk_note_snippets "dpkg" ;;
  "find") bulk_note_snippets "find" ;;
  "fugitive") bulk_snippets "fugitive" ;;
  "fzf") bulk_snippets "fzf" ;;
  "git-fork") bulk_snippets "git-fork" ;;
  "grep") bulk_note_snippets "grep" ;;
  "http-status") bulk_snippets "http-status" ;;
  "journalctl") bulk_note_snippets "journalctl" ;;
  "lazygit") bulk_show_snippets "lazygit" ;;
  "molecule") bulk_note_snippets "molecule" ;;
  "mpv") mpv "mpv" ;;
  "ncmpcpp") ncmpcpp "ncmpcpp" ;;
  "newsboat") newsboat "newsboat" ;;
  "npm") bulk_note_snippets "npm" ;;
  "octo") bulk_snippets "octo" ;;
  "ppa") bulk_note_snippets "ppa" ;;
  "py-pip") bulk_snippets "py-pip" ;;
  "py-poetry") bulk_snippets "py-poetry" ;;
  "py-uv") bulk_snippets "py-uv" ;;
  "quickfix") bulk_snippets "quickfix" ;;
  "rg") bulk_note_snippets "rg" ;;
  "search-and-replace") bulk_snippets "search-and-replace" ;;
  "sed") bulk_note_snippets "sed" ;;
  "stow") bulk_note_snippets "stow" ;;
  "surfingkeys") surfingkeys "surfingkeys" ;;
  "sxhkdrc") sxhkdrc "sxhkdrc" ;;
  "systemctl") bulk_note_snippets "systemctl" ;;
  "term-alacritty") terminal_alacritty "term-alacritty" ;;
  "term-kitty") terminal_kitty "term-kitty" ;;
  "term-st") terminal_st "term-st" ;;
  "term-termite") terminal_termite "term-termite" ;;
  "tmux") tmux "tmux" ;;
  "user") bulk_note_snippets "user" ;;
  "vim") vim "vim" ;;
  "vimium") vimiumc "vimium_c" ;;
  "wget") bulk_note_snippets "wget" ;;
  "yarn") bulk_note_snippets "yarn" ;;
  "zathura") zathura "zathura" ;;

  "facade-python") bulk_code_snippets "facade-python" ;;
  *) dunstify "[!] $TITLE_DUNST" "Can't find the snippet for '$1'\nor is it not implemented yet?" ;;

  esac
}

main "$1"
