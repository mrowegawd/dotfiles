#!/bin/bash

set -e -u

DOTFILES_PATH="$HOME/moxconf/development/dotfiles"
MISCXRDB_PATH="$HOME/.config/miscxrdb"

NEW_FONTS="JetBrains Mono"
NEW_FONTS_SIZE=16

GET_FG=$(xrdb -query | grep -i foreground | cut -d':' -f2 | xargs)
GET_BG=$(xrdb -query | grep -i background | cut -d':' -f2 | xargs)

# GET_BLACK=$(xrdb -query | grep -i .color0 | cut -d':' -f2 | head -1 | xargs)
# GET_BLACK_ALT=$(xrdb -query | grep -i .color8 | cut -d':' -f2 | head -1 | xargs)

GET_RED=$(xrdb -query | grep -i .color1 | cut -d':' -f2 | head -1 | xargs)
GET_RED_ALT=$(xrdb -query | grep -i .color9 | cut -d':' -f2 | head -1 | xargs)

GET_GREEN=$(xrdb -query | grep -i .color2 | cut -d':' -f2 | head -1 | xargs)
GET_GREEN_ALT=$(xrdb -query | grep -i .color10 | cut -d':' -f2 | head -1 | xargs)

GET_YELLOW=$(xrdb -query | grep -i .color3 | cut -d':' -f2 | head -1 | xargs)
GET_YELLOW_ALT=$(xrdb -query | grep -i .color11 | cut -d':' -f2 | head -1 | xargs)

GET_BLUE=$(xrdb -query | grep -i .color4 | cut -d':' -f2 | head -1 | xargs)
GET_BLUE_ALT=$(xrdb -query | grep -i .color12 | cut -d':' -f2 | head -1 | xargs)

GET_MAGENTA=$(xrdb -query | grep -i .color5 | cut -d':' -f2 | head -1 | xargs)
# GET_MAGENTA_ALT=$(xrdb -query | grep -i .color13 | cut -d':' -f2 | head -1 | xargs)

GET_CYAN=$(xrdb -query | grep -i .color6 | cut -d':' -f2 | head -1 | xargs)
# GET_CYAN_ALT=$(xrdb -query | grep -i .color14 | cut -d':' -f2 | head -1 | xargs)

GET_WHITE=$(xrdb -query | grep -i .color7 | cut -d':' -f2 | head -1 | xargs)
# GET_WHITE_ALT=$(xrdb -query | grep -i .color15 | cut -d':' -f2 | head -1 | xargs)

# GET_COL_16="#6c8cac"
GET_COL_17="#333333"
# GET_COL_18="#5b5b5b"
# GET_COL_19="#131313"
# GET_COL_20="#262626"
# GET_COL_21="#262626"
# GET_COL_22="#181818"
# GET_COL_23="#5f5f5f"
# GET_COL_24="#ffb49d"
# GET_COL_25="#2f2f2f"
# GET_COL_26="#5f5f5f"
# GET_COL_27="#ffb49d"
# GET_COL_28="#ffb49d"

MASTER_THEME_FILE=/tmp/master-colors-themes

if [[ -f "$MASTER_THEME_FILE" ]]; then
  # GET_COL_16=$(grep -i color16 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  GET_COL_17=$(grep -i color17 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_18=$(grep -i color18 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_19=$(grep -i color19 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  #
  # GET_COL_20=$(grep -i color20 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_21=$(grep -i color21 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_22=$(grep -i color22 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_23=$(grep -i color23 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_24=$(grep -i color24 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_25=$(grep -i color25 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_26=$(grep -i color26 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_27=$(grep -i color27 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_28=$(grep -i color28 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)

  # Lazygit: lazygit_active_border, lazygit_inactive_border, lazygit_border_fg, selected_line_fg
  # GET_COL_29=$(grep -i color29 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_30=$(grep -i color30 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_31=$(grep -i color31 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_32=$(grep -i color32 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)

  #  Delta: plus-emph-style, plus-style
  # GET_COL_33=$(grep -i color33 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_34=$(grep -i color34 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)

  # Delta: plus-emph-style, minus-emph-style
  # GET_COL_35=$(grep -i color35 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_36=$(grep -i color36 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)

  # ZSH-AUTOSUGGESTIONS
  # GET_COL_37=$(grep -i color37 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)

  # YAZI
  # GET_COL_38=$(grep -i color38 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_39=$(grep -i color39 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_40=$(grep -i color40 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_41=$(grep -i color41 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_42=$(grep -i color42 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_43=$(grep -i color43 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  #
  # GET_COL_44=$(grep -i color44 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_45=$(grep -i color45 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_46=$(grep -i color46 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_47=$(grep -i color47 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_48=$(grep -i color48 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_49=$(grep -i color49 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  #
  # GET_COL_50=$(grep -i color50 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  # GET_COL_51=$(grep -i color51 <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
fi

lighten_color() {
  hex_color="$1"
  factor="$2"

  # Validasi panjang HEX
  if [[ ${#hex_color} -ne 7 ]]; then
    echo "Error: HEX color must be in the format '#RRGGBB'."
    exit 1
  fi

  # Ekstraksi komponen warna
  r=$(printf "%d" 0x"${hex_color:1:2}")
  g=$(printf "%d" 0x"${hex_color:3:2}")
  b=$(printf "%d" 0x"${hex_color:5:2}")

  # Mencerahkan setiap komponen warna
  r=$(($r + $factor))
  g=$(($g + $factor))
  b=$(($b + $factor))

  # Batasi nilai maksimum ke 255
  r=$(($r > 255 ? 255 : $r))
  g=$(($g > 255 ? 255 : $g))
  b=$(($b > 255 ? 255 : $b))

  # Format kembali ke format HEX
  printf "#%02x%02x%02x\n" "$r" "$g" "$b"
}
darken_color() {
  hex_color="$1"
  factor="$2"

  # Validasi panjang HEX
  if [[ ${#hex_color} -ne 7 ]]; then
    echo "Error: HEX color must be in the format '#RRGGBB'."
    exit 1
  fi

  # Ekstraksi komponen warna
  r=$(printf "%d" 0x"${hex_color:1:2}")
  g=$(printf "%d" 0x"${hex_color:3:2}")
  b=$(printf "%d" 0x"${hex_color:5:2}")

  # Menggelapkan setiap komponen warna
  r=$(($r - $factor))
  g=$(($g - $factor))
  b=$(($b - $factor))

  # Batasi nilai minimum ke 0
  r=$(($r < 0 ? 0 : $r))
  g=$(($g < 0 ? 0 : $g))
  b=$(($b < 0 ? 0 : $b))

  # Format kembali ke format HEX
  printf "#%02x%02x%02x\n" "$r" "$g" "$b"
}

send_notify() {
  if command -v dunstify >/dev/null; then
    dunstify -i ~/.config/miscxrdb/icons/bell.png "Change Themes" "$1"
  else
    notify-send "Change Themes" "$1"
  fi
}

set_vim() {
  _PATH_NVIM="$DOTFILES_PATH/nvim/.config/nvim/lua/r/config/init.lua"
  if [ "$_PATH_NVIM" == "base2tone-space-dark" ]; then
    PATH_NVIM="base2tone_space_dark"
  else
    PATH_NVIM=$_PATH_NVIM
  fi

  sed -i -e "s/^local.colorscheme\s=.*/local colorscheme = \"$1\"/" "$PATH_NVIM"
}
set_rofi() {
  _ROFI_PATH="$DOTFILES_PATH/rofi/.config/rofi"

  if [ ! -d "$_ROFI_PATH" ]; then
    send_notify "set_rofi: path $_ROFI_PATH does not exists!" && exit 1
  fi

  cat "$_ROFI_PATH/colors/_nightly.rasi" >"$_ROFI_PATH/colors/nightly.rasi"

  ROFI_BACKGROUND=$(grep -i rofi_background: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%background%%/$ROFI_BACKGROUND/g" "$_ROFI_PATH/colors/nightly.rasi"

  ROFI_BACKGROUND_ALT=$(grep -i rofi_background_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%background_alt%%/$ROFI_BACKGROUND_ALT/g" "$_ROFI_PATH/colors/nightly.rasi"

  ROFI_FOREGROUND=$(grep -i rofi_foreground: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%foreground%%/$ROFI_FOREGROUND/g" "$_ROFI_PATH/colors/nightly.rasi"

  ROFI_KEYWORD=$(grep -i rofi_keyword: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%keyword%%/$ROFI_KEYWORD/g" "$_ROFI_PATH/colors/nightly.rasi"

  # Selected
  ROFI_SELECTED=$(grep -i rofi_selected: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%selected%%/$ROFI_SELECTED/g" "$_ROFI_PATH/colors/nightly.rasi"

  ROFI_SELECTED_ALT=$(grep -i rofi_selected_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%selected_alt%%/$ROFI_SELECTED_ALT/g" "$_ROFI_PATH/colors/nightly.rasi"

  # Normal colors
  ROFI_RED=$(grep -i rofi_red: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%red%%/$ROFI_RED/g" "$_ROFI_PATH/colors/nightly.rasi"
  ROFI_GREEN=$(grep -i rofi_green: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%green%%/$ROFI_GREEN/g" "$_ROFI_PATH/colors/nightly.rasi"
  sed -i -e "s/%%urgent%%/$GET_MAGENTA/g" "$_ROFI_PATH/colors/nightly.rasi"
  sed -i -e "s/%%blue%%/$GET_BLUE/g" "$_ROFI_PATH/colors/nightly.rasi"
  sed -i -e "s/%%yellow%%/$GET_YELLOW/g" "$_ROFI_PATH/colors/nightly.rasi"
  sed -i -e "s/%%border_alt%%/$GET_YELLOW/g" "$_ROFI_PATH/colors/nightly.rasi"
  sed -i -e "s/%%border%%/$GET_BLUE/g" "$_ROFI_PATH/colors/nightly.rasi"
}
set_dunst() {
  _DUNST_PATH="$DOTFILES_PATH/dunst/.config/dunst"

  [[ ! -d "$_DUNST_PATH" ]] && send_notify "set_dunst: path $_DUNST_PATH does not exists!" && exit 1

  cat "$_DUNST_PATH/dunst-config" "$_DUNST_PATH/dunst-theme" >"$_DUNST_PATH/dunstrc"

  # Normal
  DUNST_LOW_BG=$(grep -i dunst_low_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%low_bg%%/$DUNST_LOW_BG/g" "$_DUNST_PATH/dunstrc"

  DUNST_LOW_FG=$(grep -i dunst_low_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%low_fg%%/$DUNST_LOW_FG/g" "$_DUNST_PATH/dunstrc"

  DUNST_LOW_FRAME=$(grep -i dunst_low_frame: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%low_frame_fg%%/$DUNST_LOW_FRAME/g" "$_DUNST_PATH/dunstrc"

  # Normal
  DUNST_NORMAL_BG=$(grep -i dunst_normal_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%normal_bg%%/$DUNST_NORMAL_BG/g" "$_DUNST_PATH/dunstrc"

  DUNST_NORMAL_FG=$(grep -i dunst_normal_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%normal_fg%%/$DUNST_NORMAL_FG/g" "$_DUNST_PATH/dunstrc"

  DUNST_NORMAL_FRAME=$(grep -i dunst_normal_frame: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%normal_frame_fg%%/$DUNST_NORMAL_FRAME/g" "$_DUNST_PATH/dunstrc"

  # Critical
  DUNST_CRITICAL_FG=$(grep -i dunst_critical_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%critical_fg%%/$DUNST_CRITICAL_FG/g" "$_DUNST_PATH/dunstrc"

  DUNST_CRITICAL_BG=$(grep -i dunst_critical_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%critical_bg%%/$DUNST_CRITICAL_BG/g" "$_DUNST_PATH/dunstrc"

  DUNST_CRITICAL_FRAME=$(grep -i dunst_critical_frame: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%critical_frame_fg%%/$DUNST_CRITICAL_FRAME/g" "$_DUNST_PATH/dunstrc"

  # General
  DUNST_BG=$(grep -i dunst_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%background%%/$DUNST_BG/g" "$_DUNST_PATH/dunstrc"

  DUNST_FG=$(grep -i dunst_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%foreground%%/$DUNST_FG/g" "$_DUNST_PATH/dunstrc"

  DUNST_BORDER=$(grep -i dunst_border: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_border%%/$DUNST_BORDER/g" "$_DUNST_PATH/dunstrc"

  # What is this?
  sed -i -e "s/%%frame_border%%/$GET_RED/g" "$_DUNST_PATH/dunstrc"
  sed -i -e "s/%%frame_color%%/$GET_BLUE/g" "$_DUNST_PATH/dunstrc"

  sed -i -e "s/%%font_style%%/$NEW_FONTS/g" "$_DUNST_PATH/dunstrc"
  sed -i -e "s/%%font_size%%/$NEW_FONTS_SIZE/g" "$_DUNST_PATH/dunstrc"

  "$HOME/.config/dunst/rundust.sh" >/dev/null
}
set_tmux() {
  _PATH_TMUX_THEMES="$DOTFILES_PATH/tmuxconfig/.config/tmuxconfig/themes/tmux-snapshot"

  if [ -f "$_PATH_TMUX_THEMES" ]; then
    sleep 1

    # Mist
    TMUX_FG=$(grep -i tmux_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^TMUX_FG=.*$/TMUX_FG=\"$TMUX_FG\"/g" "$_PATH_TMUX_THEMES"

    TMUX_BG=$(grep -i tmux_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^TMUX_BG=.*$/TMUX_BG=\"$TMUX_BG\"/g" "$_PATH_TMUX_THEMES"

    TMUX_FM_BG=$(grep -i tmux_fm_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^FM_BG=.*$/FM_BG=\"$TMUX_FM_BG\"/g" "$_PATH_TMUX_THEMES"

    TMUX_KEYWORD=$(grep -i tmux_keyword: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^TMUX_KEYWORD=.*$/TMUX_KEYWORD=\"$TMUX_KEYWORD\"/g" "$_PATH_TMUX_THEMES"

    # Tab
    TMUX_TAB_ACTIVE_FG=$(grep -i tmux_tab_active_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^TAB_ACTIVE_FG=.*$/TAB_ACTIVE_FG=\"$TMUX_TAB_ACTIVE_FG\"/g" "$_PATH_TMUX_THEMES"

    TMUX_TAB_ACTIVE_BG=$(grep -i tmux_tab_active_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^TAB_ACTIVE_BG=.*$/TAB_ACTIVE_BG=\"$TMUX_TAB_ACTIVE_BG\"/g" "$_PATH_TMUX_THEMES"

    TMUX_BORDER_ACTIVE=$(grep -i tmux_border_active: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^BORDER_ACTIVE=.*$/BORDER_ACTIVE=\"$TMUX_BORDER_ACTIVE\"/g" "$_PATH_TMUX_THEMES"

    TMUX_BORDER_INACTIVE=$(grep -i tmux_border_inactive: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^BORDER_INACTIVE=.*$/BORDER_INACTIVE=\"$TMUX_BORDER_INACTIVE\"/g" "$_PATH_TMUX_THEMES"

    TMUX_BORDER_INACTIVE_STATUS_FG=$(grep -i tmux_border_inactive_status_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^BORDER_INACTIVE_STATUS_FG=.*$/BORDER_INACTIVE_STATUS_FG=\"$TMUX_BORDER_INACTIVE_STATUS_FG\"/g" "$_PATH_TMUX_THEMES"

    # Session
    TMUX_SESSION_BG=$(grep -i tmux_session_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^SESSION_BG=.*$/SESSION_BG=\"$TMUX_SESSION_BG\"/g" "$_PATH_TMUX_THEMES"

    TMUX_SESSION_FG=$(grep -i tmux_session_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^SESSION_FG=.*$/SESSION_FG=\"$TMUX_SESSION_FG\"/g" "$_PATH_TMUX_THEMES"

    # Statusline
    TMUX_STATUSLINE_FG=$(grep -i tmux_statusline_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^STATUSLINE_FG=.*$/STATUSLINE_FG=\"$TMUX_STATUSLINE_FG\"/g" "$_PATH_TMUX_THEMES"

    TMUX_MESSAGE_BG=$(grep -i tmux_message_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^STATUSLINE_BG_MESSAGE=.*$/STATUSLINE_BG_MESSAGE=\"$TMUX_MESSAGE_BG\"/g" "$_PATH_TMUX_THEMES"

    sed -i -e "s/^RED=.*$/RED=\"$GET_RED\"/g" "$_PATH_TMUX_THEMES"
    sed -i -e "s/^BLUE=.*$/BLUE=\"$GET_BLUE\"/g" "$_PATH_TMUX_THEMES"
    sed -i -e "s/^WHITE=.*$/WHITE=\"$GET_WHITE\"/g" "$_PATH_TMUX_THEMES"
    sed -i -e "s/^GREEN=.*$/GREEN=\"$GET_GREEN\"/g" "$_PATH_TMUX_THEMES"
  else
    send_notify "set_tmux: path $_PATH_TMUX_THEMES not ex"
  fi

}
set_kitty() {
  _PATH_KITTY_THEMES="$DOTFILES_PATH/kitty/.config/kitty/colors/$1.conf"

  if [ -f "$_PATH_KITTY_THEMES" ]; then
    sleep 1

    # Tab
    KITTY_TAB_ACTIVE_FG=$(grep -i kitty_tab_active_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^active_tab_foreground.*$/active_tab_foreground $KITTY_TAB_ACTIVE_FG/g" "$_PATH_KITTY_THEMES"

    KITTY_TAB_ACTIVE_BG=$(grep -i kitty_tab_active_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^active_tab_background.*$/active_tab_background $KITTY_TAB_ACTIVE_BG/g" "$_PATH_KITTY_THEMES"

    KITTY_TAB_INACTIVE_FG=$(grep -i kitty_tab_inactive_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^inactive_tab_foreground.*$/inactive_tab_background $KITTY_TAB_INACTIVE_FG/g" "$_PATH_KITTY_THEMES"

    KITTY_TAB_INACTIVE_BG=$(grep -i kitty_tab_inactive_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^inactive_tab_background.*$/inactive_tab_background $KITTY_TAB_INACTIVE_BG/g" "$_PATH_KITTY_THEMES"

    KITTY_TAB_BAR_BG=$(grep -i kitty_tab_bar_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^tab_bar_background.*$/tab_bar_background $KITTY_TAB_BAR_BG/g" "$_PATH_KITTY_THEMES"

    # Border
    KITTY_BORDER_ACTIVE=$(grep -i kitty_border_active: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^active_border_color\s.*$/active_border_color $KITTY_BORDER_ACTIVE/g" "$_PATH_KITTY_THEMES"

    KITTY_BORDER_INACTIVE=$(grep -i kitty_border_inactive: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/^inactive_border_color\s.*$/inactive_border_color $KITTY_BORDER_INACTIVE/g" "$_PATH_KITTY_THEMES"

  else
    send_notify "set_kitty: path $_PATH_KITTY_THEMES not ex"
  fi

}
set_delta() {
  _DELTA_PATH="$HOME/.config/delta/themes"

  if [ ! -f "$_DELTA_PATH" ]; then
    send_notify "set_delta: $_DELTA_PATH does not exists!" && exit 1
  fi

  DELTA_FILE_BG=$(grep -i delta_file_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  DELTA_FILE_FG=$(grep -i delta_file_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^file-style.*/file-style = \"$DELTA_FILE_FG\" bold \"$DELTA_FILE_BG\"/g" "$_DELTA_PATH"

  DELTA_HUNK_HEADER_BG=$(grep -i delta_hunk_header_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^hunk-header-style.*/hunk-header-style = syntax bold \"$DELTA_HUNK_HEADER_BG\"/g" "$_DELTA_PATH"

  # For line number
  DELTA_LINE_NUMBER_MINUS=$(grep -i delta_line_number_minus: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^line-numbers-minus-style.*/line-numbers-minus-style = \"$DELTA_LINE_NUMBER_MINUS\" italic/g" "$_DELTA_PATH"

  DELTA_LINE_NUMBER_PLUS=$(grep -i delta_line_number_plus: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^line-numbers-plus-style.*/line-numbers-plus-style = \"$DELTA_LINE_NUMBER_PLUS\" italic/g" "$_DELTA_PATH"

  # For hunk plus
  DELTA_HUNK_PLUS_FG=$(grep -i delta_hunk_plus_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  DELTA_HUNK_PLUS_BG=$(grep -i delta_hunk_plus_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^plus-style.*/plus-style = \"$DELTA_HUNK_PLUS_FG\" bold \"$DELTA_HUNK_PLUS_BG\"/g" "$_DELTA_PATH" # color for hunk added

  DELTA_HUNK_EMP_PLUS_FG=$(grep -i delta_hunk_emp_plus_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  DELTA_HUNK_EMP_PLUS_BG=$(grep -i delta_hunk_emp_plus_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^plus-emph-style.*/plus-emph-style = \"$DELTA_HUNK_EMP_PLUS_FG\" bold \"$DELTA_HUNK_EMP_PLUS_BG\"/g" "$_DELTA_PATH"

  # For hunk minus
  DELTA_HUNK_MINUS_FG=$(grep -i delta_hunk_minus_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  DELTA_HUNK_MINUS_BG=$(grep -i delta_hunk_minus_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^minus-style.*/minus-style = \"$DELTA_HUNK_MINUS_FG\" bold \"$DELTA_HUNK_MINUS_BG\"/g" "$_DELTA_PATH" # color for hunk deleted

  DELTA_HUNK_EMP_MINUS_FG=$(grep -i delta_hunk_emp_minus_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  DELTA_HUNK_EMP_MINUS_BG=$(grep -i delta_hunk_emp_minus_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^minus-emph-style.*/minus-emph-style = \"$DELTA_HUNK_EMP_MINUS_FG\" bold \"$DELTA_HUNK_EMP_MINUS_BG\"/g" "$_DELTA_PATH"

}
set_zathura() {
  _ZATHURA_PATH="$DOTFILES_PATH/zathura/.config/zathura"

  if [ ! -d "$_ZATHURA_PATH" ]; then
    send_notify "set_zathura: $_ZATHURA_PATH does not exists!" && exit 1
  fi

  sed -i -e "s/^set default-bg.*/set default-bg \"$GET_BG\"/g" "$_ZATHURA_PATH/zathurarc"
  sed -i -e "s/^set default-fg.*/set default-fg \"$GET_FG\"/g" "$_ZATHURA_PATH/zathurarc"

  sed -i -e "s/^set notification-bg.*/set notification-bg \"$GET_BG\"/g" "$_ZATHURA_PATH/zathurarc"
  sed -i -e "s/^set notification-fg.*/set notification-fg \"$GET_FG\"/g" "$_ZATHURA_PATH/zathurarc"

  sed -i -e "s/^set highlight-color.*/set highlight-color \"$GET_RED\"/g" "$_ZATHURA_PATH/zathurarc"
  sed -i -e 's/^set highlight-fg.*/set highlight-fg "#0e0807"/g' ~/.config/zathura/zathurarc

  sed -i -e "s/^set inputbar-bg.*/set inputbar-bg \"$GET_GREEN\"/g" "$_ZATHURA_PATH/zathurarc"
  # sed -i -e "s/^set inputbar-fg.*/set inputbar-fg \"$GETFOREGROUND\"/g" "$_ZATHURA_PATH/zathurarc"

  sed -i -e "s/^set recolor-lightcolor.*/set recolor-lightcolor \"$GET_BG\"/g" "$_ZATHURA_PATH/zathurarc"
}
set_terminal() {
  # size=$(xrandr | grep '\*' | xargs | cut -d" " -f1)
  # if [[ $size == "1024x768" ]]; then
  # 	FONTSIZETERM="9"
  # fi

  # GHOSTTY
  GHOSTTY_THEME_PATH="$HOME/.config/ghostty/themes/$1"
  if [ -f "$GHOSTTY_THEME_PATH" ]; then
    GHOSTTY_CONFIG="$HOME/.config/ghostty/config"

    sed -i -e "s/^theme.=.*/theme = $1/g" "$GHOSTTY_CONFIG"
    # dunstify "theme ghostty [+]"
  else
    dunstify "theme ghostty [-]"
  fi

  # KITTY
  KITTY_THEME_PATH="$HOME/.config/kitty/colors/$1.conf"
  if [ -f "$KITTY_THEME_PATH" ]; then
    KITTY_CONFIG="$HOME/.config/kitty/kitty.conf"

    sed -i -e "s/^include\s~\\/.config\\/kitty\\/colors.*/include ~\\/.config\\/kitty\\/colors\\/$1.conf/g" "$KITTY_CONFIG"
    # dunstify "theme kitty [+]"
  else
    dunstify "theme kitty [-]"
  fi

  # ALACRITTY
  # if [ -f "$DOTFILES_PATH/alacritty/.config/alacritty/themes/$1" ]; then
  #   cat "$DOTFILES_PATH/alacritty/.config/alacritty/_alacritty.cfg" >"$DOTFILES_PATH/alacritty/.config/alacritty/alacritty.toml"
  #   cat "$DOTFILES_PATH/alacritty/.config/alacritty/themes/$1" >>"$DOTFILES_PATH/alacritty/.config/alacritty/alacritty.toml"
  #   # dunstify "theme alacritty [+]"
  # else
  #   dunstify "theme alacritty [-]"
  # fi
}
set_btop() {
  _BTOP_PATH="$DOTFILES_PATH/btop/.config/btop"
  _BTOP_CONFIG_THEME_PATH="$_BTOP_PATH/themes/_theme.theme"
  _BTOP_THEME_PATH="$_BTOP_PATH/themes/guard.theme"

  if [ -d "$_BTOP_PATH" ]; then

    cat "$_BTOP_CONFIG_THEME_PATH" >"$_BTOP_THEME_PATH"

    BTOP_FG=$(grep -i btop_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%foreground%%/$BTOP_FG/g" "$_BTOP_THEME_PATH"

    BTOP_BG=$(grep -i btop_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%background%%/$BTOP_BG/g" "$_BTOP_THEME_PATH"

    BTOP_HIGHLIGHT_KEY=$(grep -i btop_highlight_key: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%highlight_key%%/$BTOP_HIGHLIGHT_KEY/g" "$_BTOP_THEME_PATH"

    BTOP_CURSORLINE_FG=$(grep -i btop_cursorline_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%cursorline_fg%%/$BTOP_CURSORLINE_FG/g" "$_BTOP_THEME_PATH"

    BTOP_CURSORLINE_BG=$(grep -i btop_cursorline_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%cursorline_bg%%/$BTOP_CURSORLINE_BG/g" "$_BTOP_THEME_PATH"

    BTOP_TITLE=$(grep -i btop_title: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%title_fg%%/$BTOP_TITLE/g" "$_BTOP_THEME_PATH"

    BTOP_BORDER_FG=$(grep -i btop_border_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%border_fg%%/$BTOP_BORDER_FG/g" "$_BTOP_THEME_PATH"

    BTOP_BORDER_FG=$(grep -i btop_border_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%keyword%%/$GET_COL_17/g" "$_BTOP_THEME_PATH"

    # sed -i -e "s/%%green_alt%%/$GET_GREEN_ALT/g" "$_BTOP_THEME_PATH"
    # sed -i -e "s/%%green_light_1%%/$GREEN_LIGHT_1/g" "$_BTOP_THEME_PATH"
    # sed -i -e "s/%%green_light_2%%/$GREEN_LIGHT_2/g" "$_BTOP_THEME_PATH"
    #
    # sed -i -e "s/%%red_light_1%%/$RED_LIGHT_1/g" "$_BTOP_THEME_PATH"
    # sed -i -e "s/%%red_light_2%%/$RED_LIGHT_2/g" "$_BTOP_THEME_PATH"

    BTOP_INACTIVE_TEXT=$(grep -i btop_inactive_text: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%inactive_text%%/$BTOP_INACTIVE_TEXT/g" "$_BTOP_THEME_PATH"

    BTOP_DARKEN_BG=$(grep -i btop_darken_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%background_darken_2%%/$BTOP_DARKEN_BG/g" "$_BTOP_THEME_PATH"
  else
    send_notify "set_btop: path $_BTOP_PATH does not exists!"
  fi
}
set_yazi() {
  YAZI_FLAVORS_THEME_FOLDER="$HOME/.config/yazi/flavors"
  YAZI_FLAVORS_THEMES_PATH="$YAZI_FLAVORS_THEME_FOLDER/themes.yazi"

  if [ ! -d "$YAZI_FLAVORS_THEME_FOLDER" ]; then
    send_notify "set_yazi: path $YAZI_FLAVORS_THEME_FOLDER does not exists!" && exit 1
  fi

  TARGET_YAZI_THEME="$YAZI_FLAVORS_THEMES_PATH/flavor.toml"

  cat "$YAZI_FLAVORS_THEMES_PATH/flavor" >"$TARGET_YAZI_THEME"

  YAZI_HOVERED=$(grep -i yazi_hovered: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_hovered%%/$YAZI_HOVERED/g" "$TARGET_YAZI_THEME"

  YAZI_CWD=$(grep -i yazi_cwd: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_cwd%%/$YAZI_CWD/g" "$TARGET_YAZI_THEME"

  # Cut, Copied, Selected
  YAZI_SELECTED=$(grep -i yazi_selected: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_selected%%/$YAZI_SELECTED/g" "$TARGET_YAZI_THEME"

  YAZI_COPIED=$(grep -i yazi_copied: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_copied%%/$YAZI_COPIED/g" "$TARGET_YAZI_THEME"

  YAZI_CUT=$(grep -i yazi_cut: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_cut%%/$YAZI_CUT/g" "$TARGET_YAZI_THEME"

  YAZI_MARKED_FG=$(grep -i yazi_marked_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_marked_fg%%/$YAZI_MARKED_FG/g" "$TARGET_YAZI_THEME"

  YAZI_MARKED_BG=$(grep -i yazi_marked_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_marked_bg%%/$YAZI_MARKED_BG/g" "$TARGET_YAZI_THEME"

  # Count
  YAZI_COUNT_SELECTED_BG=$(grep -i yazi_count_selected_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_count_selected_fg%%/$YAZI_COUNT_SELECTED_BG/g" "$TARGET_YAZI_THEME"
  sed -i -e "s/%%col_count_selected_bg%%/$YAZI_SELECTED/g" "$TARGET_YAZI_THEME"

  YAZI_COUNT_COPIED_BG=$(grep -i yazi_count_copied_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_count_copied_fg%%/$YAZI_COUNT_COPIED_BG/g" "$TARGET_YAZI_THEME"
  sed -i -e "s/%%col_count_copied_bg%%/$YAZI_COPIED/g" "$TARGET_YAZI_THEME"

  YAZI_COUNT_CUT_BG=$(grep -i yazi_count_cut_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_count_cut_fg%%/$YAZI_COUNT_CUT_BG/g" "$TARGET_YAZI_THEME"
  sed -i -e "s/%%col_count_cut_bg%%/$YAZI_CUT/g" "$TARGET_YAZI_THEME"

  # Tab
  YAZI_TAB_ACTIVE_FG=$(grep -i yazi_tab_active_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_tab_active_fg%%/$YAZI_TAB_ACTIVE_FG/g" "$TARGET_YAZI_THEME"

  YAZI_TAB_ACTIVE_BG=$(grep -i yazi_tab_active_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_tab_active_bg%%/$YAZI_TAB_ACTIVE_BG/g" "$TARGET_YAZI_THEME"

  YAZI_TAB_INACTIVE_FG=$(grep -i yazi_tab_inactive_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_tab_inactive_fg%%/$YAZI_TAB_INACTIVE_FG/g" "$TARGET_YAZI_THEME"

  YAZI_TAB_INACTIVE_BG=$(grep -i yazi_tab_inactive_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_tab_inactive_bg%%/$YAZI_TAB_INACTIVE_BG/g" "$TARGET_YAZI_THEME"

  # Statusline
  # Normal
  YAZI_STATUSLINE_NORMAL_FG=$(grep -i yazi_statusline_normal_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_normal_fg%%/$YAZI_STATUSLINE_NORMAL_FG/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_NORMAL_BG=$(grep -i yazi_statusline_normal_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_normal_bg%%/$YAZI_STATUSLINE_NORMAL_BG/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_NORMAL_FG_ALT=$(grep -i yazi_statusline_normal_fg_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_normal_fg_alt%%/$YAZI_STATUSLINE_NORMAL_FG_ALT/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_NORMAL_BG_ALT=$(grep -i yazi_statusline_normal_bg_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_normal_bg_alt%%/$YAZI_STATUSLINE_NORMAL_BG_ALT/g" "$TARGET_YAZI_THEME"

  # Select
  YAZI_STATUSLINE_SELECT_FG=$(grep -i yazi_statusline_select_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_select_fg%%/$YAZI_STATUSLINE_SELECT_FG/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_SELECT_BG=$(grep -i yazi_statusline_select_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_select_bg%%/$YAZI_STATUSLINE_SELECT_BG/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_SELECT_FG_ALT=$(grep -i yazi_statusline_select_fg_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_select_fg_alt%%/$YAZI_STATUSLINE_SELECT_FG_ALT/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_SELECT_BG_ALT=$(grep -i yazi_statusline_select_bg_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_select_bg_alt%%/$YAZI_STATUSLINE_SELECT_BG_ALT/g" "$TARGET_YAZI_THEME"

  # Unset
  YAZI_STATUSLINE_UNSET_FG=$(grep -i yazi_statusline_unset_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_unset_fg%%/$YAZI_STATUSLINE_UNSET_FG/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_UNSET_BG=$(grep -i yazi_statusline_unset_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_unset_bg%%/$YAZI_STATUSLINE_UNSET_BG/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_UNSET_FG_ALT=$(grep -i yazi_statusline_unset_fg_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_unset_fg_alt%%/$YAZI_STATUSLINE_UNSET_FG_ALT/g" "$TARGET_YAZI_THEME"

  YAZI_STATUSLINE_UNSET_BG_ALT=$(grep -i yazi_statusline_unset_bg_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_statusline_unset_bg_alt%%/$YAZI_STATUSLINE_UNSET_BG_ALT/g" "$TARGET_YAZI_THEME"

  # Mist
  YAZI_DIRECTORY=$(grep -i yazi_directory: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_directory%%/$YAZI_DIRECTORY/g" "$TARGET_YAZI_THEME"

  YAZI_MENU_FG=$(grep -i yazi_menu_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_filename_fg%%/$YAZI_MENU_FG/g" "$TARGET_YAZI_THEME"

  YAZI_MENU_BG=$(grep -i yazi_menu_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%col_which_bg%%/$YAZI_MENU_BG/g" "$TARGET_YAZI_THEME"
}
set_fzf() {
  FZF_PATH_CONFIG="$HOME/moxconf/development/dotfiles/miscxrdb/.config/miscxrdb/fzf"

  if [ ! -d "$FZF_PATH_CONFIG" ]; then
    send_notify "set_fzf: path $FZF_PATH_CONFIG does not exists!" && exit 1
  fi

  cat "$FZF_PATH_CONFIG/_fzf.config" >"$FZF_PATH_CONFIG/fzf.config"

  FZF_BG=$(grep -i fzf_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_bg%%/$FZF_BG/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_FG=$(grep -i fzf_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_fg%%/$FZF_FG/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_HL=$(grep -i fzf_match_fuzzy: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_hl%%/$FZF_HL/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_SELECTION_BG=$(grep -i fzf_selection_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_selection_bg%%/$FZF_BG/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_SELECTION_FG=$(grep -i fzf_selection_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_selection_fg%%/$FZF_SELECTION_FG:underline/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_SELECTION_HL=$(grep -i fzf_match: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_selection_hl%%/$FZF_SELECTION_HL/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_BORDER=$(grep -i fzf_border: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_border%%/$FZF_BORDER/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_GUTTER=$(grep -i fzf_gutter: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_gutter%%/$FZF_GUTTER/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_POINTER=$(grep -i fzf_pointer: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_pointer%%/$FZF_POINTER/g" "$FZF_PATH_CONFIG/fzf.config"

  FZF_HEADER=$(grep -i fzf_header: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/%%color_header%%/$FZF_HEADER/g" "$FZF_PATH_CONFIG/fzf.config"
}
set_zshrc() {
  ZSHRC_PATH="$HOME/.config/zsh/.zshrc"
  if [ ! -f "$ZSHRC_PATH" ]; then
    send_notify "set_zshrc: path $ZSHRC_PATH does not exists!" && exit 1
  fi

  ZSHRC_SUGEST=$(grep -i zshrc_sugest: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^colorsuggest=.*/colorsuggest=\"fg=$ZSHRC_SUGEST\"/g" "$ZSHRC_PATH"

  ZSHRC_LINES=$(grep -i zshrc_lines: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^colorline=.*/colorline=\"$ZSHRC_LINES\"/g" "$ZSHRC_PATH"
}
set_lazygit() {
  LAZYGIT_THEME_PATH="$HOME/.config/lazygit/theme"

  THEME_LAZYGIT="$LAZYGIT_THEME_PATH/_theme"
  THEME_LAZYGIT_FLA="$LAZYGIT_THEME_PATH/fla.yml"

  if [ -f "$THEME_LAZYGIT" ]; then
    rm "$THEME_LAZYGIT_FLA"
    cp "$THEME_LAZYGIT" "$THEME_LAZYGIT_FLA"

    LAZYGIT_ACTIVE_BORDER=$(grep -i lazygit_active_border: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%active_border_color%%/$LAZYGIT_ACTIVE_BORDER/g" "$THEME_LAZYGIT_FLA"

    LAZYGIT_INACTIVE_BORDER=$(grep -i lazygit_inactive_border: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%inactive_border_color%%/$LAZYGIT_INACTIVE_BORDER/g" "$THEME_LAZYGIT_FLA"

    LAZYGIT_OPTION_TXT=$(grep -i lazygit_option_txt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%options_text_color%%/$LAZYGIT_OPTION_TXT/g" "$THEME_LAZYGIT_FLA"

    LAZYGIT_SELECTED_BG=$(grep -i lazygit_selected_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%selected_line_bg_color%%/$LAZYGIT_SELECTED_BG/g" "$THEME_LAZYGIT_FLA"

    LAZYGIT_DEFAULT_FG=$(grep -i lazygit_default_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%default_fg_color%%/$LAZYGIT_DEFAULT_FG/g" "$THEME_LAZYGIT_FLA"
  fi

}
set_lazydocker() {
  LAZYDOCKER_PATH="$HOME/.config/lazydocker"

  LAZYDOCKER_CONFIG="$LAZYDOCKER_PATH/config.yml"

  LAZYDOCKER_CONFIG_FLA="$LAZYDOCKER_PATH/_config.yml"
  LAZYDOCKER_FLA="$LAZYDOCKER_PATH/theme/fla.yml"

  if [ -f "$LAZYDOCKER_CONFIG" ]; then

    cat "$LAZYDOCKER_CONFIG_FLA" "$LAZYDOCKER_FLA" >"$LAZYDOCKER_CONFIG"

    LAZYGIT_ACTIVE_BORDER=$(grep -i lazygit_active_border: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%active_border_color%%/$LAZYGIT_ACTIVE_BORDER/g" "$LAZYDOCKER_CONFIG"

    LAZYGIT_INACTIVE_BORDER=$(grep -i lazygit_inactive_border: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%inactive_border_color%%/$LAZYGIT_INACTIVE_BORDER/g" "$LAZYDOCKER_CONFIG"

    LAZYGIT_OPTION_TXT=$(grep -i lazygit_option_txt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%options_text_color%%/$LAZYGIT_OPTION_TXT/g" "$LAZYDOCKER_CONFIG"

    LAZYGIT_SELECTED_BG=$(grep -i lazygit_selected_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
    sed -i -e "s/%%selected_line_bg_color%%/$LAZYGIT_SELECTED_BG/g" "$LAZYDOCKER_CONFIG"
  fi
}
set_eww() {
  EWW_PATH="$HOME/.config/eww"

  if [ ! -d "$EWW_PATH" ]; then
    send_notify "set_eww: path $EWW_PATH does not exists!" && exit 1
  fi

  EWW_BG=$(grep -i eww_bg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^\$bg: .*/\$bg: $EWW_BG;/g" "$EWW_PATH/eww.scss"

  EWW_BG_DARKEN=$(grep -i eww_bg_darken: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^\$black: .*/\$black: $EWW_BG_DARKEN;/g" "$EWW_PATH/eww.scss"

  EWW_BG_ALT=$(grep -i eww_bg_alt: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^\$altbg: .*/\$altbg: $EWW_BG_ALT;/g" "$EWW_PATH/eww.scss"

  EWW_FG=$(grep -i eww_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^\$fg: .*/\$fg: $EWW_FG;/g" "$EWW_PATH/eww.scss"

  EWW_FG2=$(grep -i eww_fg2: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^\$fg2: .*/\$fg2: $EWW_FG2;/g" "$EWW_PATH/eww.scss"

  # sed -i -e "s/^\$gray: .*/\$gray: $GET_COL_20;/g" "$EWW_PATH/eww.scss"

  EWW_RED=$(grep -i eww_red: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^\$red: .*/\$red: $EWW_RED;/g" "$EWW_PATH/eww.scss"

  EWW_KEYWORD=$(grep -i eww_keyword: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^\$keyword: .*/\$keyword: $EWW_KEYWORD;/g" "$EWW_PATH/eww.scss"

  EWW_ICON_FG=$(grep -i eww_icon_fg: <"$MASTER_THEME_FILE" | cut -d':' -f2 | head -1 | xargs)
  sed -i -e "s/^\$magenta: .*/\$magenta: $EWW_ICON_FG;/g" "$EWW_PATH/eww.scss"

  sed -i -e "s/^\$altred: .*/\$altred: $GET_RED_ALT;/g" "$EWW_PATH/eww.scss"
  sed -i -e "s/^\$green: .*/\$green: $GET_GREEN;/g" "$EWW_PATH/eww.scss"
  sed -i -e "s/^\$altgreen: .*/\$altgreen: $GET_GREEN_ALT;/g" "$EWW_PATH/eww.scss"
  sed -i -e "s/^\$yellow: .*/\$yellow: $GET_YELLOW;/g" "$EWW_PATH/eww.scss"
  sed -i -e "s/^\$altyellow: .*/\$altyellow: $GET_YELLOW_ALT;/g" "$EWW_PATH/eww.scss"
  sed -i -e "s/^\$blue: .*/\$blue: $GET_BLUE;/g" "$EWW_PATH/eww.scss"
  sed -i -e "s/^\$altblue: .*/\$altblue: $GET_BLUE_ALT;/g" "$EWW_PATH/eww.scss"
  sed -i -e "s/^\$cyan: .*/\$cyan: $GET_CYAN;/g" "$EWW_PATH/eww.scss"
}
set_firefox() {
  IGET_CUS="$(xrdb -query | grep 'color8:' | awk '{print $NF}' | head -1)"

  FIREFOX_DEFAULT_PATH="$HOME/.mozilla/firefox/oehc9lj6.default-esr/chrome/components"
  # $HOME/.mozilla/firefox/oehc9lj6.default-esr/chrome/components/ogx_root-personal.css
  #
  if [ -d "$FIREFOX_DEFAULT_PATH" ]; then

    sed -i -e "s/--fuchsia:.*/--fuchsia: $IGET_CUS; /" "$FIREFOX_DEFAULT_PATH/ogx_root-personal.css"
    sed -i -e "s/--blue:.*/--blue: $GET_BLUE; /" "$FIREFOX_DEFAULT_PATH/ogx_root-personal.css"
    sed -i -e "s/--cyan:.*/--cyan: $GET_CYAN; /" "$FIREFOX_DEFAULT_PATH/ogx_root-personal.css"
    sed -i -e "s/--green:.*/--green: $GET_GREEN; /" "$FIREFOX_DEFAULT_PATH/ogx_root-personal.css"
    sed -i -e "s/--yellow:.*/--yellow: $GET_YELLOW; /" "$FIREFOX_DEFAULT_PATH/ogx_root-personal.css"

    sed -i -e "s/--red:.*/--red: $GET_RED; /" "$FIREFOX_DEFAULT_PATH/ogx_root-personal.css"

    sed -i -e "s/background-color:.*/background-color: $GET_BG !important;/g" "$FIREFOX_DEFAULT_PATH/ogx_tricks.css"
  else
    send_notify "set_firefox: path $FIREFOX_DEFAULT_PATH does not exists!"
  fi

}
set_ncmpcpp() {
  NCMPCPP_PATH="$HOME/.ncmpcpp/config"

  if [ ! -f "$NCMPCPP_PATH" ]; then
    send_notify "Not impelemented yet"
  else
    send_notify "set_ncmpcpp: path $NCMPCPP_PATH do not exists!"
  fi
}
set_polybar() {
  _POLYBAR_PATH="$DOTFILES_PATH/polybar/.config/polybar"
  _POLYBAR_CONFIG_MODULE_PATH="$_POLYBAR_PATH/bar/newback/modules.ini"

  dunstify "not impelemented yet"

  # if [ -f "$_POLYBAR_CONFIG_MODULE_PATH" ]; then
  #
  #   statusline_fg=$GET_COL_45
  #   statusline=$GET_COL_46
  #   keyword_alt=$GET_COL_16
  #   if [ "$1" == "tokyonight-day" ] || [ "$1" == "rose-pine-dawn" ]; then
  #     statusline_fg=$GET_COL_46
  #     statusline=$GET_COL_16
  #     keyword_alt=$GET_COL_45
  #   fi
  #
  #   sed -i -e "s/^keyword\s=.*$/keyword = $GET_COL_17/g" "$_POLYBAR_CONFIG_MODULE_PATH"
  #   sed -i -e "s/^keyword_alt\s=.*$/keyword_alt = $keyword_alt/g" "$_POLYBAR_CONFIG_MODULE_PATH"
  #
  #   sed -i -e "s/^statusline_fg\s=.*$/statusline_fg = $statusline_fg/g" "$_POLYBAR_CONFIG_MODULE_PATH"
  #   sed -i -e "s/^statusline\s=.*$/statusline = $statusline/g" "$_POLYBAR_CONFIG_MODULE_PATH"
  # fi
}
set_shaders_color() {
  _GHOSTTY_PATH="$DOTFILES_PATH/ghosty/.config/ghostty"
  _SHADERS_CURSOR_SMEAR_FADE="$_GHOSTTY_PATH/shaders/cursor_smear_fade.glsl"

  if [ -f "$_SHADERS_CURSOR_SMEAR_FADE" ]; then

    VSCODE_SHADERS_SMEAR="vec4(1.0, 1.0, 1.0, 1.0);" # white

    if [ "$1" == "base46-aylin" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.702, 0.153, 0.435, 1.0);"
    fi
    if [ "$1" == "base46-catppuccin" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.780, 0.024, 0.235, 1.0);"
    fi
    if [ "$1" == "base46-chocolate" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.784, 0.729, 0.643, 1.0);"
    fi
    if [ "$1" == "base46-doomchad" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.655, 0.682, 0.733, 1.0);"
    fi
    if [ "$1" == "base46-everforest" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.902, 0.596, 0.459, 1.0);"
    fi
    if [ "$1" == "base46-gruvchad" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.922, 0.859, 0.698, 1.0);"
    fi
    if [ "$1" == "base46-horizon" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.702, 0.153, 0.435, 1.0);"
    fi
    if [ "$1" == "base46-jabuti" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.753, 0.796, 0.89, 1.0);"
    fi
    if [ "$1" == "base46-jellybeans" ]; then
      VSCODE_SHADERS_SMEAR="vec4(1.0, 0.647, 0.376, 0.502);"
    fi
    if [ "$1" == "base46-kanagawa" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.702, 0.153, 0.435, 1.0);"
    fi
    if [ "$1" == "base46-material-darker" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.086, 0.686, 0.792, 1.0);"
    fi
    if [ "$1" == "base46-onenord" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.219, 0.475, 0.773, 1.0);"
    fi
    if [ "$1" == "base46-rosepine" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.341, 0.322, 0.475, 1.0);"
    fi
    if [ "$1" == "base46-seoul256_dark" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.843, 0.373, 0.529, 1.0);"
    fi
    if [ "$1" == "base46-solarized_dark" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.439, 0.510, 0.518, 1.0);"
    fi
    if [ "$1" == "base46-zenburn" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.953, 0.918, 0.859, 1.0);"
    fi
    if [ "$1" == "lackluster" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.871, 0.933, 0.929, 1.0);"
    fi
    if [ "$1" == "tokyonight-night" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.620, 0.055, 0.024, 1.0);"
    fi
    if [ "$1" == "tokyonight-storm" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.702, 0.153, 0.435, 1.0);"
    fi
    if [ "$1" == "vscode_modern" ]; then
      VSCODE_SHADERS_SMEAR="vec4(0.980, 0.098, 0.098, 1.0);"
    fi
    sed -i -e "s/^const vec4 TRAIL_COLOR\s=.*$/const vec4 TRAIL_COLOR = $VSCODE_SHADERS_SMEAR/g" "$_SHADERS_CURSOR_SMEAR_FADE"
  fi
}

wm_bspwm() {
  ~/.config/bspwm/bspwmrc &>/dev/null
  # ~/.config/bspwm/bspwmrc
  # ~/.config/polybar/runpolybar.sh &>/dev/null
}
wm_awesome() {
  echo "awesome.restart()" | awesome-client
}

setup() {
  # set new Xresources theme
  sed -i -e \
    "s/^#include \\([^ ]*xresource-theme[^ ]*\\)/#include \"\\.config\\/miscxrdb\\/xresource-theme\\/$1\"/g" \
    "$DOTFILES_PATH/home/.Xresources"
  xrdb ~/.Xresources
  xrdb -merge ~/.Xresources

  #shellcheck source=/dev/null

  set_rofi
  set_dunst
  set_tmux "$1"
  set_btop
  set_eww
  set_vim "$1"
  # set_zathura
  set_terminal "$1"
  # set_firefox "$1"

  set_fzf
  set_yazi "$1"
  set_lazygit
  set_lazydocker
  set_delta
  set_zshrc "$1"
  # set_polybar "$1"
  set_shaders_color "$1"
  set_kitty "$1"

  # case "$DEKSTOP_SESSION" in
  # # "bspwm") wm_bspwm ;;
  # "awesome") wm_awesome ;;
  # esac

  # bspc wm -r && sleep 2 && send_notify "Reload bspwm config.."
  sleep 1 && send_notify "Reload bspwm config.."

  "$HOME/.config/miscxrdb/exbin/fehbg" "$1"

  NOTIFS=(
    "Btop"
    "Delta"
    "Dunst"
    "Eww"
    "FZF"
    "Kitty"
    "Rofi"
    "Terminal"
    "Tmux"
    "Vim"
    "Yazi"
    "Zshrc"
  )

  MESSAGE="Theme: $1"

  for i in "${!NOTIFS[@]}"; do
    MESSAGE+=$(printf "\n%-12s ✅" "${NOTIFS[$i]}")
  done

  send_notify "$MESSAGE"
}

main() {
  dir="$HOME/.config/rofi/menu"
  theme="styles/big_center"
  rofi_command="rofi -modi drun -theme $dir/$theme -show drun"

  [[ ! -d $MISCXRDB_PATH ]] && send_notify "Path: $MISCXRDB_PATH not found!" && exit 1
  _NAMETHEME=$(find "$MISCXRDB_PATH/xresource-theme" -type f -exec basename {} \; | sort | $rofi_command -dmenu -p "  ")
  [[ -z $_NAMETHEME ]] && exit 1

  STHEM="false"

  array=()
  while IFS= read -r -d $'\0'; do
    array+=("$REPLY")
  done < <(find "$HOME/.config/miscxrdb/xresource-theme" -type f -print0)

  for value in "${array[@]}"; do

    if [[ "$_NAMETHEME" == "$(basename "$value")" ]]; then
      STHEM="true"
    fi
  done

  if [[ $STHEM == "false" ]]; then
    send_notify "Load theme: $_NAMETHEME\nNot found, abort it"
    exit 1
  fi

  setup "$_NAMETHEME"
}

"$@"
