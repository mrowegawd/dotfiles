#!/bin/sh

not_in_tmux() {
	[ -z "$TMUX" ]
}

FILE_PATH="${1}" # Full path of the highlighted file

WIDTH="${2}"     # Width of the preview pane (number of fitting characters)
HEIGHT="${3}"    # Height of the preview pane (number of fitting characters)
X="${4}"         # X coordinate of the preview pane
Y="${5}"         # Y coordinate of the preview pane

if ! [ -f "$FILE_PATH" ] && ! [ -h "$FILE_PATH" ]; then
    exit
fi

FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION_LOWER="$(printf "%s" "${FILE_EXTENSION}" | tr '[:upper:]' '[:lower:]')"
MIME_TYPE="$(file --dereference --brief --mime-type -- "${FILE_PATH}")"

# [ -n "$WIDTH" ] && [ -n "$HEIGHT" ] && [ -n "$X" ] && [ -n "$Y" ] || PAGE_MODE=$?
[ $# -gt 1 ] || PAGE_MODE=$?

hash() {
    printf '%s/.cache/lf/%s.jpg' "$HOME" "yo"
        # "$(gstat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | md5 -q | awk '{print $1}')"
}

IMAGE_CACHE_PATH="$(hash "$FILE_PATH")" # Full path that should be used to cache image preview


# Calculate where the image should be placed on the screen.
# num=$(printf "%0.f\n" "`echo "$(tput cols) / 2" | bc`")
# numb=$(printf "%0.f\n" "`echo "$(tput cols) - $num - 1" | bc`")
# numc=$(printf "%0.f\n" "`echo "$(tput lines) - 2" | bc`")

image() {
	if [ -n "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ]; then
		printf '{"action": "add", "identifier": "PREVIEW", "x": "%s", "y": "%s", "width": "%s", "height": "%s", "scaler": "contain", "path": "%s"}\n' "$4" "$5" "$(($2 - 1))" "$(($3 - 1))" "$1" >"$FIFO_UEBERZUG"
		exit 1
	else
		chafa "$1" -s "$4x"
	fi

	# if not_in_tmux; then
	# 	dunstify "no"
	# else
	# 	tmux select-pane -R
	# 	# echo "tmux split-window -l\"$NNN_SPLITSIZE\"% -d\"$split\" -p\"$NNN_SPLITSIZE\" \"$0\" \"$1\"" >>/tmp/test_dong
	# 	tmux split-window -l"-50"% "${ENVVARS[@]}" -d"$split" -p"$NNN_SPLITSIZE" "$0" "$1"
	# 	tmux select-pane -L
	# fi
}

pdf_view() {
	if type zathura >/dev/null 2>&1; then
		# zathura "$path" >/dev/null 2>&1 &
		# zahtura
		if [ -n "$_RANGER_PREVIEW_PID" ]; then
			kill "$_RANGER_PREVIEW_PID"
			unset _RANGER_PREVIEW_PID
		fi

		# zathura "$path" >/dev/null 2>&1 &
		nohup zathura "$1" >/dev/null 2>&1 &
		_RANGER_PREVIEW_PID=$!
	fi
}

batorcat() {
	file="$1"
	shift
	if command -v bat >/dev/null 2>&1; then
		bat --color=always --style=plain --pager=never "$file" "$@"
	else
		cat "$file"
	fi
}

draw() {
    if [ "$PAGE_MODE" ]; then
        WIDTH=${lf_width:=$(tput cols)}
        HEIGHT=${lf_height:=$(tput lines)}
        X=0
        Y=0
    fi
    if [ -n "$TMUX" ]; then
        WIDTH=$((WIDTH - 1))
        HEIGHT=$((HEIGHT - 1))
    fi
    if [ "$PAGE_MODE" ]; then
        clear
        kitty +kitten icat --stdin no --transfer-mode memory --place "${WIDTH}x${HEIGHT}@${X}x${Y}" "$1" </dev/null >/dev/tty
        hold
        kitty +kitten icat --clear --stdin no --transfer-mode memory </dev/null >/dev/tty
    else
        # preview launched in preview mode
        kitty +kitten icat --stdin no --transfer-mode memory --place "${WIDTH}x${HEIGHT}@${X}x${Y}" "$1" </dev/null >/dev/tty
        exit 1 # needed for the preview to refresh
    fi
}

handle_video() {
	#  clear
	# # if [ "$GUI" -ne 0 ]; then
	# # if is_mac; then
	# # nohup open "${FPATH}" >/dev/null 2>&1 &
	# # if type smplayer >/dev/null 2>&1; then
	# # 	nohup smplayer "${FPATH}" >/dev/null 2>&1 &
	# if type mpv >/dev/null 2>&1; then
	# 	if [ -n "$_MPV_PREVIEW_PID" ]; then
	# 		kill "$_MPV_PREVIEW_PID"
	# 		unset _MPV_PREVIEW_PID
	# 	fi
	#
	# 	# nohup mpv "$1" >/dev/null 2>&1 &
	# 	mpv --force-window=immediate --autofit=900x900 --geometry=-700-100 --loop-file "$1" &
	#    _MPV_PREVIEW_PID=$!
	#   # mpv --force-window=immediate --autofit=900x900 --geometry=-700-100 --loop-file "$1"
	# 	# nohup mpv --autofit=1000x900 --geometry=-15-60 "$1" >/dev/null 2>&1 &
	# fi
	#  dunstify "yo yo"

  image="$IMAGE_CACHE_PATH"
  ffmpeg -i "${FILE_PATH}" -map 0:v -map -0:V -c copy "${IMAGE_CACHE_PATH}" && return 6
  ffmpegthumbnailer -i "${FILE_PATH}" -o "${IMAGE_CACHE_PATH}" -s 0 && return 6
  # return 1
	# else
	# 	return
	# fi
	# elif type ffmpegthumbnailer >/dev/null 2>&1; then
	# 	# Thumbnail
	# 	[ -d "${IMAGE_CACHE_PATH}" ] || mkdir "${IMAGE_CACHE_PATH}"
	# 	ffmpegthumbnailer -i "${FPATH}" -o "${IMAGE_CACHE_PATH}/${FNAME}.jpg" -s 0
	# 	viu -n "${IMAGE_CACHE_PATH}/${FNAME}.jpg" | eval "$PAGER"
	# elif type mediainfo >/dev/null 2>&1; then
	# 	mediainfo "${FPATH}" | eval "$PAGER"
	# elif type exiftool >/dev/null 2>&1; then
	# 	exiftool "${FPATH}" | eval "$PAGER"
	# else
	# 	return
	# fi
  if [ -n "$image" ]; then
      draw "$image"
  # else
  #     fallback
  fi
}

IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}"

image() {
  if [ -f "$1" ] && [ -n "$DISPLAY" ] && [ -z "$WAYLAND_DISPLAY" ] && command -V ueberzug >/dev/null 2>&1; then
    printf '{"action": "add", "identifier": "PREVIEW", "x": "%s", "y": "%s", "width": "%s", "height": "%s", "scaler": "contain", "path": "%s"}\n' "$4" "$5" "$(($2-1))" "$(($3-1))" "$1" > "$FIFO_UEBERZUG"
  else
    mediainfo "$6"
  fi
}


CACHE="$HOME/.cache/lf/thumbnail.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | awk '{print $1}'))"

case "$(printf "%s\n" "$(readlink -f "$1")" | awk '{print tolower($0)}')" in
*.tgz | *.tar.gz) tar tzf "$1" ;;
*.tar.bz2 | *.tbz2) tar tjf "$1" ;;
*.tar.txz | *.txz) xz --list "$1" ;;
*.tar) tar tf "$1" ;;
*.zip | *.jar | *.war | *.ear | *.oxt) unzip -l "$1" ;;
*.rar) unrar l "$1" ;;
*.7z) 7z l "$1" ;;
*.[1-8]) man "$1" | col -b ;;
*.o) nm "$1" ;;
*.torrent) transmission-show "$1" ;;
*.iso) iso-info --no-header -l "$1" ;;
*.odt | *.ods | *.odp | *.sxw) odt2txt "$1" ;;
*.doc) catdoc "$1" ;;
*.docx) docx2txt "$1" - ;;
*.xls | *.xlsx)
	ssconvert --export-type=Gnumeric_stf:stf_csv "$1" "fd://1" | batorcat --language=csv
	;;
*.wav | *.mp3 | *.flac | *.m4a | *.wma | *.ape | *.ac3 | *.og[agx] | *.spx | *.opus | *.as[fx] | *.mka)
	exiftool "$1"
	;;
*.pdf)
	[ ! -f "${CACHE}.jpg" ] &&
		pdftoppm -jpeg -f 1 -singlefile "$1" "$CACHE"

	image "${CACHE}.jpg" "$2" "$3" "$4" "$5"
	# *.pdf)
	# 	pdf_view "$1"
	# 	# [ ! -f "${CACHE}.jpg" ] &&
	# 	# 	pdftoppm -jpeg -f 1 -singlefile "$1" "$CACHE"
	# 	# image "${CACHE}.jpg" "$2" "$3" "$4" "$5"
	;;
*.epub)
	[ ! -f "$CACHE" ] &&
		epub-thumbnailer "$1" "$CACHE" 1024
	image "$CACHE" "$2" "$3" "$4" "$5"
	;;
*.avi | *.mp4 | *.wmv | *.dat | *.3gp | *.ogv | *.mkv | *.mpg | *.mpeg | *.vob | *.fl[icv] | *.m2v | *.mov | *.webm | *.ts | *.mts | *.m4v | *.r[am] | *.qt | *.divx)

  # CACHE=$(mktemp /tmp/thumbcache.XXXXX)
  # ffmpegthumbnailer -i "$1" -o "$CACHE" -s 0
  # "$HOME/.config/lf/image" draw "$CACHE" "$num" 1 "$numb" "$numc"
	# [ ! -f "${CACHE}.jpg" ] &&
	# exec >/dev/tty
	# ffmpegthumbnailer -i "$1" -o "${CACHE}.jpg" -s 0 -q 5
	# image "${CACHE}.jpg" "$2" "$3" "$4" "$5"
  # dunstify "$IMAGE_CACHE_PATH"

  # ffmpeg -i "${FILE_PATH}" -map 0:v -map -0:V -c copy "${IMAGE_CACHE_PATH}" && return 6
  # ffmpegthumbnailer -i "${FILE_PATH}" -o "${IMAGE_CACHE_PATH}" -s 0 && return 6
  # return 1

	# tmux select-pane -R
	# current_pane=$(tmux display-message -p '#{pane_id}')
	#
	# if [ -z "${current_pane}" ]; then # --> jadi conditional ini tidak masuk
	# 	# dunstify "mantap"
	# 	tmux split-window -h -p 83
	# 	current_pane=$(tmux display-message -p '#{pane_id}')
	# fi

	# nohup mpv --autofit=1000x900 --geometry=-15-60 "$1" >/dev/null 2>&1 &
	# handle_video

  CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/lf/thumb.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | cut -d' ' -f1)"
  [ ! -f "$CACHE" ] && ffmpegthumbnailer -i "$1" -o "$CACHE" -s 0
  dunstify "no2: $2, no3: $3, no4: $4, no5: $5"
  image "$CACHE" "$2" "$3" "$4" "$5" "$1"

	;;
*.bmp | *.jpg | *.jpeg | *.png | *.xpm | *.webp | *.gif | *.jfif)
	image "$1" "$2" "$3" "$4" "$5"
	;;
*.ino)
	batorcat --language=cpp "$1"
	;;
*)
	batorcat "$1"
	;;
esac
exit 0

